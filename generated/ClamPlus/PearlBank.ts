// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddToContractWhitelist extends ethereum.Event {
  get params(): AddToContractWhitelist__Params {
    return new AddToContractWhitelist__Params(this);
  }
}

export class AddToContractWhitelist__Params {
  _event: AddToContractWhitelist;

  constructor(event: AddToContractWhitelist) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveFromContractWhitelist extends ethereum.Event {
  get params(): RemoveFromContractWhitelist__Params {
    return new RemoveFromContractWhitelist__Params(this);
  }
}

export class RemoveFromContractWhitelist__Params {
  _event: RemoveFromContractWhitelist;

  constructor(event: RemoveFromContractWhitelist) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rps(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get multipliedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeMultiplier extends ethereum.Event {
  get params(): StakeMultiplier__Params {
    return new StakeMultiplier__Params(this);
  }
}

export class StakeMultiplier__Params {
  _event: StakeMultiplier;

  constructor(event: StakeMultiplier) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get multipliedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawMultiplier extends ethereum.Event {
  get params(): WithdrawMultiplier__Params {
    return new WithdrawMultiplier__Params(this);
  }
}

export class WithdrawMultiplier__Params {
  _event: WithdrawMultiplier;

  constructor(event: WithdrawMultiplier) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get multipliedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PearlBank__otterInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PearlBank extends ethereum.SmartContract {
  static bind(address: Address): PearlBank {
    return new PearlBank("PearlBank", address);
  }

  BASE(): BigInt {
    let result = super.call("BASE", "BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE", "BASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CLAM(): Address {
    let result = super.call("CLAM", "CLAM():(address)", []);

    return result[0].toAddress();
  }

  try_CLAM(): ethereum.CallResult<Address> {
    let result = super.tryCall("CLAM", "CLAM():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MANAGER_ROLE(): Bytes {
    let result = super.call("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SCALE(): BigInt {
    let result = super.call("SCALE", "SCALE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SCALE", "SCALE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addToContractWhitelist(_contract: Address): boolean {
    let result = super.call(
      "addToContractWhitelist",
      "addToContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBoolean();
  }

  try_addToContractWhitelist(_contract: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addToContractWhitelist",
      "addToContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositLimit(): BigInt {
    let result = super.call("depositLimit", "depositLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositLimit", "depositLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableTokenRewards(staker: Address, token: Address): BigInt {
    let result = super.call(
      "getAvailableTokenRewards",
      "getAvailableTokenRewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(staker), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getAvailableTokenRewards(
    staker: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableTokenRewards",
      "getAvailableTokenRewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(staker), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isContract(addr: Address): boolean {
    let result = super.call("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isContract(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRewardToken(param0: Address): boolean {
    let result = super.call("isRewardToken", "isRewardToken(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isRewardToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRewardToken",
      "isRewardToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(addr: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedContract(addr: Address): boolean {
    let result = super.call(
      "isWhitelistedContract",
      "isWhitelistedContract(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedContract(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedContract",
      "isWhitelistedContract(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multiplierStakingEnabled(): boolean {
    let result = super.call(
      "multiplierStakingEnabled",
      "multiplierStakingEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_multiplierStakingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "multiplierStakingEnabled",
      "multiplierStakingEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  otterInfo(param0: Address): PearlBank__otterInfoResult {
    let result = super.call(
      "otterInfo",
      "otterInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PearlBank__otterInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_otterInfo(
    param0: Address
  ): ethereum.CallResult<PearlBank__otterInfoResult> {
    let result = super.tryCall(
      "otterInfo",
      "otterInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PearlBank__otterInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  paidTokenRewardsPerStake(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "paidTokenRewardsPerStake",
      "paidTokenRewardsPerStake(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_paidTokenRewardsPerStake(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paidTokenRewardsPerStake",
      "paidTokenRewardsPerStake(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payRewardsEnabled(): boolean {
    let result = super.call(
      "payRewardsEnabled",
      "payRewardsEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_payRewardsEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "payRewardsEnabled",
      "payRewardsEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  removeFromContractWhitelist(_contract: Address): boolean {
    let result = super.call(
      "removeFromContractWhitelist",
      "removeFromContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBoolean();
  }

  try_removeFromContractWhitelist(
    _contract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeFromContractWhitelist",
      "removeFromContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardManager(): Address {
    let result = super.call("rewardManager", "rewardManager():(address)", []);

    return result[0].toAddress();
  }

  try_rewardManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardManager",
      "rewardManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeEnabled(): boolean {
    let result = super.call("stakeEnabled", "stakeEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_stakeEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stakeEnabled", "stakeEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toBePaid(param0: Address, param1: Address): BigInt {
    let result = super.call("toBePaid", "toBePaid(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_toBePaid(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toBePaid",
      "toBePaid(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalMultipliedStaked(): BigInt {
    let result = super.call(
      "totalMultipliedStaked",
      "totalMultipliedStaked():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalMultipliedStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMultipliedStaked",
      "totalMultipliedStaked():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTokenRewardsPerStake(param0: Address): BigInt {
    let result = super.call(
      "totalTokenRewardsPerStake",
      "totalTokenRewardsPerStake(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalTokenRewardsPerStake(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokenRewardsPerStake",
      "totalTokenRewardsPerStake(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferEnabled(): boolean {
    let result = super.call("transferEnabled", "transferEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_transferEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferEnabled",
      "transferEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelistedContracts(param0: Address): boolean {
    let result = super.call(
      "whitelistedContracts",
      "whitelistedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whitelistedContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedContracts",
      "whitelistedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(amount_: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount_)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(amount_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawEnabled(): boolean {
    let result = super.call("withdrawEnabled", "withdrawEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdrawEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawEnabled",
      "withdrawEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawFee(otter_: Address, amount_: BigInt): BigInt {
    let result = super.call(
      "withdrawFee",
      "withdrawFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(otter_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawFee(
    otter_: Address,
    amount_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFee",
      "withdrawFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(otter_),
        ethereum.Value.fromUnsignedBigInt(amount_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFeeDuration(): BigInt {
    let result = super.call(
      "withdrawFeeDuration",
      "withdrawFeeDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawFeeDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFeeDuration",
      "withdrawFeeDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFeeRate(): BigInt {
    let result = super.call(
      "withdrawFeeRate",
      "withdrawFeeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFeeRate",
      "withdrawFeeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddRewardCall extends ethereum.Call {
  get inputs(): AddRewardCall__Inputs {
    return new AddRewardCall__Inputs(this);
  }

  get outputs(): AddRewardCall__Outputs {
    return new AddRewardCall__Outputs(this);
  }
}

export class AddRewardCall__Inputs {
  _call: AddRewardCall;

  constructor(call: AddRewardCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddRewardCall__Outputs {
  _call: AddRewardCall;

  constructor(call: AddRewardCall) {
    this._call = call;
  }
}

export class AddRewardTokenCall extends ethereum.Call {
  get inputs(): AddRewardTokenCall__Inputs {
    return new AddRewardTokenCall__Inputs(this);
  }

  get outputs(): AddRewardTokenCall__Outputs {
    return new AddRewardTokenCall__Outputs(this);
  }
}

export class AddRewardTokenCall__Inputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRewardTokenCall__Outputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }
}

export class AddToContractWhitelistCall extends ethereum.Call {
  get inputs(): AddToContractWhitelistCall__Inputs {
    return new AddToContractWhitelistCall__Inputs(this);
  }

  get outputs(): AddToContractWhitelistCall__Outputs {
    return new AddToContractWhitelistCall__Outputs(this);
  }
}

export class AddToContractWhitelistCall__Inputs {
  _call: AddToContractWhitelistCall;

  constructor(call: AddToContractWhitelistCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToContractWhitelistCall__Outputs {
  _call: AddToContractWhitelistCall;

  constructor(call: AddToContractWhitelistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get CLAM_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get depositLimit_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveFromContractWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromContractWhitelistCall__Inputs {
    return new RemoveFromContractWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromContractWhitelistCall__Outputs {
    return new RemoveFromContractWhitelistCall__Outputs(this);
  }
}

export class RemoveFromContractWhitelistCall__Inputs {
  _call: RemoveFromContractWhitelistCall;

  constructor(call: RemoveFromContractWhitelistCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromContractWhitelistCall__Outputs {
  _call: RemoveFromContractWhitelistCall;

  constructor(call: RemoveFromContractWhitelistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveRewardTokenCall extends ethereum.Call {
  get inputs(): RemoveRewardTokenCall__Inputs {
    return new RemoveRewardTokenCall__Inputs(this);
  }

  get outputs(): RemoveRewardTokenCall__Outputs {
    return new RemoveRewardTokenCall__Outputs(this);
  }
}

export class RemoveRewardTokenCall__Inputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRewardTokenCall__Outputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetDepositLimitCall extends ethereum.Call {
  get inputs(): SetDepositLimitCall__Inputs {
    return new SetDepositLimitCall__Inputs(this);
  }

  get outputs(): SetDepositLimitCall__Outputs {
    return new SetDepositLimitCall__Outputs(this);
  }
}

export class SetDepositLimitCall__Inputs {
  _call: SetDepositLimitCall;

  constructor(call: SetDepositLimitCall) {
    this._call = call;
  }

  get limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositLimitCall__Outputs {
  _call: SetDepositLimitCall;

  constructor(call: SetDepositLimitCall) {
    this._call = call;
  }
}

export class SetMultiplierStakeEnabledCall extends ethereum.Call {
  get inputs(): SetMultiplierStakeEnabledCall__Inputs {
    return new SetMultiplierStakeEnabledCall__Inputs(this);
  }

  get outputs(): SetMultiplierStakeEnabledCall__Outputs {
    return new SetMultiplierStakeEnabledCall__Outputs(this);
  }
}

export class SetMultiplierStakeEnabledCall__Inputs {
  _call: SetMultiplierStakeEnabledCall;

  constructor(call: SetMultiplierStakeEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetMultiplierStakeEnabledCall__Outputs {
  _call: SetMultiplierStakeEnabledCall;

  constructor(call: SetMultiplierStakeEnabledCall) {
    this._call = call;
  }
}

export class SetPayRewardsEnabledCall extends ethereum.Call {
  get inputs(): SetPayRewardsEnabledCall__Inputs {
    return new SetPayRewardsEnabledCall__Inputs(this);
  }

  get outputs(): SetPayRewardsEnabledCall__Outputs {
    return new SetPayRewardsEnabledCall__Outputs(this);
  }
}

export class SetPayRewardsEnabledCall__Inputs {
  _call: SetPayRewardsEnabledCall;

  constructor(call: SetPayRewardsEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPayRewardsEnabledCall__Outputs {
  _call: SetPayRewardsEnabledCall;

  constructor(call: SetPayRewardsEnabledCall) {
    this._call = call;
  }
}

export class SetRewardManagerCall extends ethereum.Call {
  get inputs(): SetRewardManagerCall__Inputs {
    return new SetRewardManagerCall__Inputs(this);
  }

  get outputs(): SetRewardManagerCall__Outputs {
    return new SetRewardManagerCall__Outputs(this);
  }
}

export class SetRewardManagerCall__Inputs {
  _call: SetRewardManagerCall;

  constructor(call: SetRewardManagerCall) {
    this._call = call;
  }

  get rewardManager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardManagerCall__Outputs {
  _call: SetRewardManagerCall;

  constructor(call: SetRewardManagerCall) {
    this._call = call;
  }
}

export class SetScaleCall extends ethereum.Call {
  get inputs(): SetScaleCall__Inputs {
    return new SetScaleCall__Inputs(this);
  }

  get outputs(): SetScaleCall__Outputs {
    return new SetScaleCall__Outputs(this);
  }
}

export class SetScaleCall__Inputs {
  _call: SetScaleCall;

  constructor(call: SetScaleCall) {
    this._call = call;
  }

  get _scale(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetScaleCall__Outputs {
  _call: SetScaleCall;

  constructor(call: SetScaleCall) {
    this._call = call;
  }
}

export class SetStakeEnabledCall extends ethereum.Call {
  get inputs(): SetStakeEnabledCall__Inputs {
    return new SetStakeEnabledCall__Inputs(this);
  }

  get outputs(): SetStakeEnabledCall__Outputs {
    return new SetStakeEnabledCall__Outputs(this);
  }
}

export class SetStakeEnabledCall__Inputs {
  _call: SetStakeEnabledCall;

  constructor(call: SetStakeEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStakeEnabledCall__Outputs {
  _call: SetStakeEnabledCall;

  constructor(call: SetStakeEnabledCall) {
    this._call = call;
  }
}

export class SetStakingWithdrawEnabledCall extends ethereum.Call {
  get inputs(): SetStakingWithdrawEnabledCall__Inputs {
    return new SetStakingWithdrawEnabledCall__Inputs(this);
  }

  get outputs(): SetStakingWithdrawEnabledCall__Outputs {
    return new SetStakingWithdrawEnabledCall__Outputs(this);
  }
}

export class SetStakingWithdrawEnabledCall__Inputs {
  _call: SetStakingWithdrawEnabledCall;

  constructor(call: SetStakingWithdrawEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStakingWithdrawEnabledCall__Outputs {
  _call: SetStakingWithdrawEnabledCall;

  constructor(call: SetStakingWithdrawEnabledCall) {
    this._call = call;
  }
}

export class SetTransferEnabledCall extends ethereum.Call {
  get inputs(): SetTransferEnabledCall__Inputs {
    return new SetTransferEnabledCall__Inputs(this);
  }

  get outputs(): SetTransferEnabledCall__Outputs {
    return new SetTransferEnabledCall__Outputs(this);
  }
}

export class SetTransferEnabledCall__Inputs {
  _call: SetTransferEnabledCall;

  constructor(call: SetTransferEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetTransferEnabledCall__Outputs {
  _call: SetTransferEnabledCall;

  constructor(call: SetTransferEnabledCall) {
    this._call = call;
  }
}

export class SetWithdrawFeeDurationCall extends ethereum.Call {
  get inputs(): SetWithdrawFeeDurationCall__Inputs {
    return new SetWithdrawFeeDurationCall__Inputs(this);
  }

  get outputs(): SetWithdrawFeeDurationCall__Outputs {
    return new SetWithdrawFeeDurationCall__Outputs(this);
  }
}

export class SetWithdrawFeeDurationCall__Inputs {
  _call: SetWithdrawFeeDurationCall;

  constructor(call: SetWithdrawFeeDurationCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawFeeDurationCall__Outputs {
  _call: SetWithdrawFeeDurationCall;

  constructor(call: SetWithdrawFeeDurationCall) {
    this._call = call;
  }
}

export class SetWithdrawFeeRateCall extends ethereum.Call {
  get inputs(): SetWithdrawFeeRateCall__Inputs {
    return new SetWithdrawFeeRateCall__Inputs(this);
  }

  get outputs(): SetWithdrawFeeRateCall__Outputs {
    return new SetWithdrawFeeRateCall__Outputs(this);
  }
}

export class SetWithdrawFeeRateCall__Inputs {
  _call: SetWithdrawFeeRateCall;

  constructor(call: SetWithdrawFeeRateCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawFeeRateCall__Outputs {
  _call: SetWithdrawFeeRateCall;

  constructor(call: SetWithdrawFeeRateCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
