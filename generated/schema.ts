// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockHash", Value.fromBytes(Bytes.empty()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockHash(): Bytes {
    let value = this.get("blockHash");
    return value!.toBytes();
  }

  set blockHash(value: Bytes) {
    this.set("blockHash", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }
}

export class LogRebase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("rebase", Value.fromBigInt(BigInt.zero()));
    this.set("index", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogRebase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LogRebase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LogRebase", id.toString(), this);
    }
  }

  static load(id: string): LogRebase | null {
    return changetype<LogRebase | null>(store.get("LogRebase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get rebase(): BigInt {
    let value = this.get("rebase");
    return value!.toBigInt();
  }

  set rebase(value: BigInt) {
    this.set("rebase", Value.fromBigInt(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class Buyback extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("clamAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Buyback entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Buyback entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Buyback", id.toString(), this);
    }
  }

  static load(id: string): Buyback | null {
    return changetype<Buyback | null>(store.get("Buyback", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get clamAmount(): BigInt {
    let value = this.get("clamAmount");
    return value!.toBigInt();
  }

  set clamAmount(value: BigInt) {
    this.set("clamAmount", Value.fromBigInt(value));
  }
}

export class ProtocolMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("clamCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("sClamCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("clamPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("nextEpochRebase", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("nextDistributedClam", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryMaiUsdcRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryMaiUsdcQiInvestmentRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryMaiRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryMaiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryFraxRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryFraxMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDaiRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryWmaticRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryWmaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryQiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryTetuQiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryOtterClamQiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDquickMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryQiWmaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryQiWmaticQiInvestmentMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryCurveMai3PoolValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryCurveMai3PoolInvestmentValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("currentAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("safeHandAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("furryHandAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stoneHandAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("diamondHandAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryClamMaiPOL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryClamFraxPOL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryClamWmaticPOL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalBurnedClam", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalBurnedClamMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairwMaticDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairMaiClamMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairUSDPLUSClamMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairMaiUsdcMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairFraxUsdcMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystopiaPairwMaticPenMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryVeDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryPenMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryVlPenMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryPenDystMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProtocolMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProtocolMetric", id.toString(), this);
    }
  }

  static load(id: string): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(store.get("ProtocolMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get clamCirculatingSupply(): BigDecimal {
    let value = this.get("clamCirculatingSupply");
    return value!.toBigDecimal();
  }

  set clamCirculatingSupply(value: BigDecimal) {
    this.set("clamCirculatingSupply", Value.fromBigDecimal(value));
  }

  get sClamCirculatingSupply(): BigDecimal {
    let value = this.get("sClamCirculatingSupply");
    return value!.toBigDecimal();
  }

  set sClamCirculatingSupply(value: BigDecimal) {
    this.set("sClamCirculatingSupply", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get clamPrice(): BigDecimal {
    let value = this.get("clamPrice");
    return value!.toBigDecimal();
  }

  set clamPrice(value: BigDecimal) {
    this.set("clamPrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get treasuryRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryRiskFreeValue(value: BigDecimal) {
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMarketValue(): BigDecimal {
    let value = this.get("treasuryMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMarketValue(value: BigDecimal) {
    this.set("treasuryMarketValue", Value.fromBigDecimal(value));
  }

  get nextEpochRebase(): BigDecimal {
    let value = this.get("nextEpochRebase");
    return value!.toBigDecimal();
  }

  set nextEpochRebase(value: BigDecimal) {
    this.set("nextEpochRebase", Value.fromBigDecimal(value));
  }

  get nextDistributedClam(): BigDecimal {
    let value = this.get("nextDistributedClam");
    return value!.toBigDecimal();
  }

  set nextDistributedClam(value: BigDecimal) {
    this.set("nextDistributedClam", Value.fromBigDecimal(value));
  }

  get treasuryMaiUsdcRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryMaiUsdcRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiUsdcRiskFreeValue(value: BigDecimal) {
    this.set("treasuryMaiUsdcRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMaiUsdcQiInvestmentRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryMaiUsdcQiInvestmentRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiUsdcQiInvestmentRiskFreeValue(value: BigDecimal) {
    this.set(
      "treasuryMaiUsdcQiInvestmentRiskFreeValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryMaiRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryMaiRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiRiskFreeValue(value: BigDecimal) {
    this.set("treasuryMaiRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMaiMarketValue(): BigDecimal {
    let value = this.get("treasuryMaiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMaiMarketValue(value: BigDecimal) {
    this.set("treasuryMaiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryFraxRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryFraxRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryFraxRiskFreeValue(value: BigDecimal) {
    this.set("treasuryFraxRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryFraxMarketValue(): BigDecimal {
    let value = this.get("treasuryFraxMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryFraxMarketValue(value: BigDecimal) {
    this.set("treasuryFraxMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryDaiRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryDaiRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryDaiRiskFreeValue(value: BigDecimal) {
    this.set("treasuryDaiRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryWmaticRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryWmaticRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryWmaticRiskFreeValue(value: BigDecimal) {
    this.set("treasuryWmaticRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryWmaticMarketValue(): BigDecimal {
    let value = this.get("treasuryWmaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryWmaticMarketValue(value: BigDecimal) {
    this.set("treasuryWmaticMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryQiMarketValue(): BigDecimal {
    let value = this.get("treasuryQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryQiMarketValue(value: BigDecimal) {
    this.set("treasuryQiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryTetuQiMarketValue(): BigDecimal {
    let value = this.get("treasuryTetuQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryTetuQiMarketValue(value: BigDecimal) {
    this.set("treasuryTetuQiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryOtterClamQiMarketValue(): BigDecimal {
    let value = this.get("treasuryOtterClamQiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryOtterClamQiMarketValue(value: BigDecimal) {
    this.set("treasuryOtterClamQiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryDquickMarketValue(): BigDecimal {
    let value = this.get("treasuryDquickMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDquickMarketValue(value: BigDecimal) {
    this.set("treasuryDquickMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryQiWmaticMarketValue(): BigDecimal {
    let value = this.get("treasuryQiWmaticMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryQiWmaticMarketValue(value: BigDecimal) {
    this.set("treasuryQiWmaticMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryQiWmaticQiInvestmentMarketValue(): BigDecimal {
    let value = this.get("treasuryQiWmaticQiInvestmentMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryQiWmaticQiInvestmentMarketValue(value: BigDecimal) {
    this.set(
      "treasuryQiWmaticQiInvestmentMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryCurveMai3PoolValue(): BigDecimal {
    let value = this.get("treasuryCurveMai3PoolValue");
    return value!.toBigDecimal();
  }

  set treasuryCurveMai3PoolValue(value: BigDecimal) {
    this.set("treasuryCurveMai3PoolValue", Value.fromBigDecimal(value));
  }

  get treasuryCurveMai3PoolInvestmentValue(): BigDecimal {
    let value = this.get("treasuryCurveMai3PoolInvestmentValue");
    return value!.toBigDecimal();
  }

  set treasuryCurveMai3PoolInvestmentValue(value: BigDecimal) {
    this.set(
      "treasuryCurveMai3PoolInvestmentValue",
      Value.fromBigDecimal(value)
    );
  }

  get currentAPY(): BigDecimal {
    let value = this.get("currentAPY");
    return value!.toBigDecimal();
  }

  set currentAPY(value: BigDecimal) {
    this.set("currentAPY", Value.fromBigDecimal(value));
  }

  get safeHandAPY(): BigDecimal {
    let value = this.get("safeHandAPY");
    return value!.toBigDecimal();
  }

  set safeHandAPY(value: BigDecimal) {
    this.set("safeHandAPY", Value.fromBigDecimal(value));
  }

  get furryHandAPY(): BigDecimal {
    let value = this.get("furryHandAPY");
    return value!.toBigDecimal();
  }

  set furryHandAPY(value: BigDecimal) {
    this.set("furryHandAPY", Value.fromBigDecimal(value));
  }

  get stoneHandAPY(): BigDecimal {
    let value = this.get("stoneHandAPY");
    return value!.toBigDecimal();
  }

  set stoneHandAPY(value: BigDecimal) {
    this.set("stoneHandAPY", Value.fromBigDecimal(value));
  }

  get diamondHandAPY(): BigDecimal {
    let value = this.get("diamondHandAPY");
    return value!.toBigDecimal();
  }

  set diamondHandAPY(value: BigDecimal) {
    this.set("diamondHandAPY", Value.fromBigDecimal(value));
  }

  get treasuryClamMaiPOL(): BigDecimal {
    let value = this.get("treasuryClamMaiPOL");
    return value!.toBigDecimal();
  }

  set treasuryClamMaiPOL(value: BigDecimal) {
    this.set("treasuryClamMaiPOL", Value.fromBigDecimal(value));
  }

  get treasuryClamFraxPOL(): BigDecimal {
    let value = this.get("treasuryClamFraxPOL");
    return value!.toBigDecimal();
  }

  set treasuryClamFraxPOL(value: BigDecimal) {
    this.set("treasuryClamFraxPOL", Value.fromBigDecimal(value));
  }

  get treasuryClamWmaticPOL(): BigDecimal {
    let value = this.get("treasuryClamWmaticPOL");
    return value!.toBigDecimal();
  }

  set treasuryClamWmaticPOL(value: BigDecimal) {
    this.set("treasuryClamWmaticPOL", Value.fromBigDecimal(value));
  }

  get totalBurnedClam(): BigDecimal {
    let value = this.get("totalBurnedClam");
    return value!.toBigDecimal();
  }

  set totalBurnedClam(value: BigDecimal) {
    this.set("totalBurnedClam", Value.fromBigDecimal(value));
  }

  get totalBurnedClamMarketValue(): BigDecimal {
    let value = this.get("totalBurnedClamMarketValue");
    return value!.toBigDecimal();
  }

  set totalBurnedClamMarketValue(value: BigDecimal) {
    this.set("totalBurnedClamMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryDystopiaPairwMaticDystMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairwMaticDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairwMaticDystMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairwMaticDystMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairMaiClamMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairMaiClamMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairMaiClamMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairMaiClamMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairUSDPLUSClamMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairUSDPLUSClamMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairUSDPLUSClamMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairUSDPLUSClamMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairMaiUsdcMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairMaiUsdcMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairMaiUsdcMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairMaiUsdcMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairFraxUsdcMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairFraxUsdcMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairFraxUsdcMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairFraxUsdcMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystopiaPairwMaticPenMarketValue(): BigDecimal {
    let value = this.get("treasuryDystopiaPairwMaticPenMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystopiaPairwMaticPenMarketValue(value: BigDecimal) {
    this.set(
      "treasuryDystopiaPairwMaticPenMarketValue",
      Value.fromBigDecimal(value)
    );
  }

  get treasuryDystMarketValue(): BigDecimal {
    let value = this.get("treasuryDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDystMarketValue(value: BigDecimal) {
    this.set("treasuryDystMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryVeDystMarketValue(): BigDecimal {
    let value = this.get("treasuryVeDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryVeDystMarketValue(value: BigDecimal) {
    this.set("treasuryVeDystMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryPenMarketValue(): BigDecimal {
    let value = this.get("treasuryPenMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryPenMarketValue(value: BigDecimal) {
    this.set("treasuryPenMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryVlPenMarketValue(): BigDecimal {
    let value = this.get("treasuryVlPenMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryVlPenMarketValue(value: BigDecimal) {
    this.set("treasuryVlPenMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryPenDystMarketValue(): BigDecimal {
    let value = this.get("treasuryPenDystMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryPenDystMarketValue(value: BigDecimal) {
    this.set("treasuryPenDystMarketValue", Value.fromBigDecimal(value));
  }
}

export class TotalBurnedClam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("burnedClam", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("burnedValueUsd", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalBurnedClam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalBurnedClam entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalBurnedClam", id.toString(), this);
    }
  }

  static load(id: string): TotalBurnedClam | null {
    return changetype<TotalBurnedClam | null>(store.get("TotalBurnedClam", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get burnedClam(): BigDecimal {
    let value = this.get("burnedClam");
    return value!.toBigDecimal();
  }

  set burnedClam(value: BigDecimal) {
    this.set("burnedClam", Value.fromBigDecimal(value));
  }

  get burnedValueUsd(): BigDecimal {
    let value = this.get("burnedValueUsd");
    return value!.toBigDecimal();
  }

  set burnedValueUsd(value: BigDecimal) {
    this.set("burnedValueUsd", Value.fromBigDecimal(value));
  }
}

export class Harvest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Harvest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Harvest entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Harvest", id.toString(), this);
    }
  }

  static load(id: string): Harvest | null {
    return changetype<Harvest | null>(store.get("Harvest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TreasuryRevenue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("qiClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("qiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dystClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dystMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("penMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ottopiaClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ottopiaMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("buybackClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("buybackMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalRevenueClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalRevenueMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeBuybackClamAmount",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeBuybackMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("yieldClamAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("yieldMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryRevenue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TreasuryRevenue entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TreasuryRevenue", id.toString(), this);
    }
  }

  static load(id: string): TreasuryRevenue | null {
    return changetype<TreasuryRevenue | null>(store.get("TreasuryRevenue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get qiClamAmount(): BigDecimal {
    let value = this.get("qiClamAmount");
    return value!.toBigDecimal();
  }

  set qiClamAmount(value: BigDecimal) {
    this.set("qiClamAmount", Value.fromBigDecimal(value));
  }

  get qiMarketValue(): BigDecimal {
    let value = this.get("qiMarketValue");
    return value!.toBigDecimal();
  }

  set qiMarketValue(value: BigDecimal) {
    this.set("qiMarketValue", Value.fromBigDecimal(value));
  }

  get dystClamAmount(): BigDecimal {
    let value = this.get("dystClamAmount");
    return value!.toBigDecimal();
  }

  set dystClamAmount(value: BigDecimal) {
    this.set("dystClamAmount", Value.fromBigDecimal(value));
  }

  get dystMarketValue(): BigDecimal {
    let value = this.get("dystMarketValue");
    return value!.toBigDecimal();
  }

  set dystMarketValue(value: BigDecimal) {
    this.set("dystMarketValue", Value.fromBigDecimal(value));
  }

  get penClamAmount(): BigDecimal {
    let value = this.get("penClamAmount");
    return value!.toBigDecimal();
  }

  set penClamAmount(value: BigDecimal) {
    this.set("penClamAmount", Value.fromBigDecimal(value));
  }

  get penMarketValue(): BigDecimal {
    let value = this.get("penMarketValue");
    return value!.toBigDecimal();
  }

  set penMarketValue(value: BigDecimal) {
    this.set("penMarketValue", Value.fromBigDecimal(value));
  }

  get ottopiaClamAmount(): BigDecimal {
    let value = this.get("ottopiaClamAmount");
    return value!.toBigDecimal();
  }

  set ottopiaClamAmount(value: BigDecimal) {
    this.set("ottopiaClamAmount", Value.fromBigDecimal(value));
  }

  get ottopiaMarketValue(): BigDecimal {
    let value = this.get("ottopiaMarketValue");
    return value!.toBigDecimal();
  }

  set ottopiaMarketValue(value: BigDecimal) {
    this.set("ottopiaMarketValue", Value.fromBigDecimal(value));
  }

  get buybackClamAmount(): BigDecimal {
    let value = this.get("buybackClamAmount");
    return value!.toBigDecimal();
  }

  set buybackClamAmount(value: BigDecimal) {
    this.set("buybackClamAmount", Value.fromBigDecimal(value));
  }

  get buybackMarketValue(): BigDecimal {
    let value = this.get("buybackMarketValue");
    return value!.toBigDecimal();
  }

  set buybackMarketValue(value: BigDecimal) {
    this.set("buybackMarketValue", Value.fromBigDecimal(value));
  }

  get totalRevenueClamAmount(): BigDecimal {
    let value = this.get("totalRevenueClamAmount");
    return value!.toBigDecimal();
  }

  set totalRevenueClamAmount(value: BigDecimal) {
    this.set("totalRevenueClamAmount", Value.fromBigDecimal(value));
  }

  get totalRevenueMarketValue(): BigDecimal {
    let value = this.get("totalRevenueMarketValue");
    return value!.toBigDecimal();
  }

  set totalRevenueMarketValue(value: BigDecimal) {
    this.set("totalRevenueMarketValue", Value.fromBigDecimal(value));
  }

  get cumulativeBuybackClamAmount(): BigDecimal {
    let value = this.get("cumulativeBuybackClamAmount");
    return value!.toBigDecimal();
  }

  set cumulativeBuybackClamAmount(value: BigDecimal) {
    this.set("cumulativeBuybackClamAmount", Value.fromBigDecimal(value));
  }

  get cumulativeBuybackMarketValue(): BigDecimal {
    let value = this.get("cumulativeBuybackMarketValue");
    return value!.toBigDecimal();
  }

  set cumulativeBuybackMarketValue(value: BigDecimal) {
    this.set("cumulativeBuybackMarketValue", Value.fromBigDecimal(value));
  }

  get yieldClamAmount(): BigDecimal {
    let value = this.get("yieldClamAmount");
    return value!.toBigDecimal();
  }

  set yieldClamAmount(value: BigDecimal) {
    this.set("yieldClamAmount", Value.fromBigDecimal(value));
  }

  get yieldMarketValue(): BigDecimal {
    let value = this.get("yieldMarketValue");
    return value!.toBigDecimal();
  }

  set yieldMarketValue(value: BigDecimal) {
    this.set("yieldMarketValue", Value.fromBigDecimal(value));
  }
}

export class APY extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("rebaseReward", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("apy", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("clamDistributed", Value.fromBigInt(BigInt.zero()));
    this.set("clamDistributedDecimal", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save APY entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save APY entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("APY", id.toString(), this);
    }
  }

  static load(id: string): APY | null {
    return changetype<APY | null>(store.get("APY", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get rebaseReward(): BigDecimal {
    let value = this.get("rebaseReward");
    return value!.toBigDecimal();
  }

  set rebaseReward(value: BigDecimal) {
    this.set("rebaseReward", Value.fromBigDecimal(value));
  }

  get apy(): BigDecimal {
    let value = this.get("apy");
    return value!.toBigDecimal();
  }

  set apy(value: BigDecimal) {
    this.set("apy", Value.fromBigDecimal(value));
  }

  get clamDistributed(): BigInt {
    let value = this.get("clamDistributed");
    return value!.toBigInt();
  }

  set clamDistributed(value: BigInt) {
    this.set("clamDistributed", Value.fromBigInt(value));
  }

  get clamDistributedDecimal(): BigDecimal {
    let value = this.get("clamDistributedDecimal");
    return value!.toBigDecimal();
  }

  set clamDistributedDecimal(value: BigDecimal) {
    this.set("clamDistributedDecimal", Value.fromBigDecimal(value));
  }
}

export class TotalBuybacks extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("boughtClam", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("boughtMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalBuybacks entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalBuybacks entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalBuybacks", id.toString(), this);
    }
  }

  static load(id: string): TotalBuybacks | null {
    return changetype<TotalBuybacks | null>(store.get("TotalBuybacks", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get boughtClam(): BigDecimal {
    let value = this.get("boughtClam");
    return value!.toBigDecimal();
  }

  set boughtClam(value: BigDecimal) {
    this.set("boughtClam", Value.fromBigDecimal(value));
  }

  get boughtMarketValue(): BigDecimal {
    let value = this.get("boughtMarketValue");
    return value!.toBigDecimal();
  }

  set boughtMarketValue(value: BigDecimal) {
    this.set("boughtMarketValue", Value.fromBigDecimal(value));
  }
}

export class DystopiaGaugeBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DystopiaGaugeBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DystopiaGaugeBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DystopiaGaugeBalance", id.toString(), this);
    }
  }

  static load(id: string): DystopiaGaugeBalance | null {
    return changetype<DystopiaGaugeBalance | null>(
      store.get("DystopiaGaugeBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class TotalBribeReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set(
      "qiBribeRewardsMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dystopiaBribeRewardsMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "polygonGrantMaticMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "polygonGrantMaticAmount",
      Value.fromBigDecimal(BigDecimal.zero())
    );
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalBribeReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalBribeReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalBribeReward", id.toString(), this);
    }
  }

  static load(id: string): TotalBribeReward | null {
    return changetype<TotalBribeReward | null>(
      store.get("TotalBribeReward", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get qiBribeRewardsMarketValue(): BigDecimal {
    let value = this.get("qiBribeRewardsMarketValue");
    return value!.toBigDecimal();
  }

  set qiBribeRewardsMarketValue(value: BigDecimal) {
    this.set("qiBribeRewardsMarketValue", Value.fromBigDecimal(value));
  }

  get dystopiaBribeRewardsMarketValue(): BigDecimal {
    let value = this.get("dystopiaBribeRewardsMarketValue");
    return value!.toBigDecimal();
  }

  set dystopiaBribeRewardsMarketValue(value: BigDecimal) {
    this.set("dystopiaBribeRewardsMarketValue", Value.fromBigDecimal(value));
  }

  get polygonGrantMaticMarketValue(): BigDecimal {
    let value = this.get("polygonGrantMaticMarketValue");
    return value!.toBigDecimal();
  }

  set polygonGrantMaticMarketValue(value: BigDecimal) {
    this.set("polygonGrantMaticMarketValue", Value.fromBigDecimal(value));
  }

  get polygonGrantMaticAmount(): BigDecimal {
    let value = this.get("polygonGrantMaticAmount");
    return value!.toBigDecimal();
  }

  set polygonGrantMaticAmount(value: BigDecimal) {
    this.set("polygonGrantMaticAmount", Value.fromBigDecimal(value));
  }
}
