// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClaimReward extends ethereum.Event {
  get params(): ClaimReward__Params {
    return new ClaimReward__Params(this);
  }
}

export class ClaimReward__Params {
  _event: ClaimReward;

  constructor(event: ClaimReward) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ConvertToQi extends ethereum.Event {
  get params(): ConvertToQi__Params {
    return new ConvertToQi__Params(this);
  }
}

export class ConvertToQi__Params {
  _event: ConvertToQi;

  constructor(event: ConvertToQi) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConvertToTetuQi extends ethereum.Event {
  get params(): ConvertToTetuQi__Params {
    return new ConvertToTetuQi__Params(this);
  }
}

export class ConvertToTetuQi__Params {
  _event: ConvertToTetuQi;

  constructor(event: ConvertToTetuQi) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class HarvestStaking extends ethereum.Event {
  get params(): HarvestStaking__Params {
    return new HarvestStaking__Params(this);
  }
}

export class HarvestStaking__Params {
  _event: HarvestStaking;

  constructor(event: HarvestStaking) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Invest extends ethereum.Event {
  get params(): Invest__Params {
    return new Invest__Params(this);
  }
}

export class Invest__Params {
  _event: Invest;

  constructor(event: Invest) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Leave extends ethereum.Event {
  get params(): Leave__Params {
    return new Leave__Params(this);
  }
}

export class Leave__Params {
  _event: Leave;

  constructor(event: Leave) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Lock extends ethereum.Event {
  get params(): Lock__Params {
    return new Lock__Params(this);
  }
}

export class Lock__Params {
  _event: Lock;

  constructor(event: Lock) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PortfolioManagerUpdated extends ethereum.Event {
  get params(): PortfolioManagerUpdated__Params {
    return new PortfolioManagerUpdated__Params(this);
  }
}

export class PortfolioManagerUpdated__Params {
  _event: PortfolioManagerUpdated;

  constructor(event: PortfolioManagerUpdated) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReinvestRateUpdated extends ethereum.Event {
  get params(): ReinvestRateUpdated__Params {
    return new ReinvestRateUpdated__Params(this);
  }
}

export class ReinvestRateUpdated__Params {
  _event: ReinvestRateUpdated;

  constructor(event: ReinvestRateUpdated) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReinvestStrategyUpdated extends ethereum.Event {
  get params(): ReinvestStrategyUpdated__Params {
    return new ReinvestStrategyUpdated__Params(this);
  }
}

export class ReinvestStrategyUpdated__Params {
  _event: ReinvestStrategyUpdated;

  constructor(event: ReinvestStrategyUpdated) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ToggleLocker extends ethereum.Event {
  get params(): ToggleLocker__Params {
    return new ToggleLocker__Params(this);
  }
}

export class ToggleLocker__Params {
  _event: ToggleLocker;

  constructor(event: ToggleLocker) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toggle(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OtterQiLocker extends ethereum.SmartContract {
  static bind(address: Address): OtterQiLocker {
    return new OtterQiLocker("OtterQiLocker", address);
  }

  QuickSwapRouter(): Address {
    let result = super.call(
      "QuickSwapRouter",
      "QuickSwapRouter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_QuickSwapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "QuickSwapRouter",
      "QuickSwapRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WMATIC(): Address {
    let result = super.call("WMATIC", "WMATIC():(address)", []);

    return result[0].toAddress();
  }

  try_WMATIC(): ethereum.CallResult<Address> {
    let result = super.tryCall("WMATIC", "WMATIC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimAndReinvest(to_: Address): BigInt {
    let result = super.call(
      "claimAndReinvest",
      "claimAndReinvest(address):(uint256)",
      [ethereum.Value.fromAddress(to_)]
    );

    return result[0].toBigInt();
  }

  try_claimAndReinvest(to_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimAndReinvest",
      "claimAndReinvest(address):(uint256)",
      [ethereum.Value.fromAddress(to_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToQI(
    path_: Array<Address>,
    amountIn_: BigInt,
    amountOutMin_: BigInt
  ): BigInt {
    let result = super.call(
      "convertToQI",
      "convertToQI(address[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(path_),
        ethereum.Value.fromUnsignedBigInt(amountIn_),
        ethereum.Value.fromUnsignedBigInt(amountOutMin_)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertToQI(
    path_: Array<Address>,
    amountIn_: BigInt,
    amountOutMin_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToQI",
      "convertToQI(address[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(path_),
        ethereum.Value.fromUnsignedBigInt(amountIn_),
        ethereum.Value.fromUnsignedBigInt(amountOutMin_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dao(): Address {
    let result = super.call("dao", "dao():(address)", []);

    return result[0].toAddress();
  }

  try_dao(): ethereum.CallResult<Address> {
    let result = super.tryCall("dao", "dao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eQi(): Address {
    let result = super.call("eQi", "eQi():(address)", []);

    return result[0].toAddress();
  }

  try_eQi(): ethereum.CallResult<Address> {
    let result = super.tryCall("eQi", "eQi():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  invest(param0: Address, param1: BigInt): BigInt {
    let result = super.call("invest", "invest(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_invest(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("invest", "invest(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockers(param0: Address): boolean {
    let result = super.call("lockers", "lockers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_lockers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("lockers", "lockers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maticQi(): Address {
    let result = super.call("maticQi", "maticQi():(address)", []);

    return result[0].toAddress();
  }

  try_maticQi(): ethereum.CallResult<Address> {
    let result = super.tryCall("maticQi", "maticQi():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ocQi(): Address {
    let result = super.call("ocQi", "ocQi():(address)", []);

    return result[0].toAddress();
  }

  try_ocQi(): ethereum.CallResult<Address> {
    let result = super.tryCall("ocQi", "ocQi():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  qi(): Address {
    let result = super.call("qi", "qi():(address)", []);

    return result[0].toAddress();
  }

  try_qi(): ethereum.CallResult<Address> {
    let result = super.tryCall("qi", "qi():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qiFarm(): Address {
    let result = super.call("qiFarm", "qiFarm():(address)", []);

    return result[0].toAddress();
  }

  try_qiFarm(): ethereum.CallResult<Address> {
    let result = super.tryCall("qiFarm", "qiFarm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reinvestRate(): BigInt {
    let result = super.call("reinvestRate", "reinvestRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reinvestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reinvestRate", "reinvestRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reinvestStrategy(): Address {
    let result = super.call(
      "reinvestStrategy",
      "reinvestStrategy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_reinvestStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reinvestStrategy",
      "reinvestStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdcMai(): Address {
    let result = super.call("usdcMai", "usdcMai():(address)", []);

    return result[0].toAddress();
  }

  try_usdcMai(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdcMai", "usdcMai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ClaimAndReinvestCall extends ethereum.Call {
  get inputs(): ClaimAndReinvestCall__Inputs {
    return new ClaimAndReinvestCall__Inputs(this);
  }

  get outputs(): ClaimAndReinvestCall__Outputs {
    return new ClaimAndReinvestCall__Outputs(this);
  }
}

export class ClaimAndReinvestCall__Inputs {
  _call: ClaimAndReinvestCall;

  constructor(call: ClaimAndReinvestCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimAndReinvestCall__Outputs {
  _call: ClaimAndReinvestCall;

  constructor(call: ClaimAndReinvestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConvertStableToQiMaticCall extends ethereum.Call {
  get inputs(): ConvertStableToQiMaticCall__Inputs {
    return new ConvertStableToQiMaticCall__Inputs(this);
  }

  get outputs(): ConvertStableToQiMaticCall__Outputs {
    return new ConvertStableToQiMaticCall__Outputs(this);
  }
}

export class ConvertStableToQiMaticCall__Inputs {
  _call: ConvertStableToQiMaticCall;

  constructor(call: ConvertStableToQiMaticCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minMaticAmount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minQiAmount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConvertStableToQiMaticCall__Outputs {
  _call: ConvertStableToQiMaticCall;

  constructor(call: ConvertStableToQiMaticCall) {
    this._call = call;
  }
}

export class ConvertToQICall extends ethereum.Call {
  get inputs(): ConvertToQICall__Inputs {
    return new ConvertToQICall__Inputs(this);
  }

  get outputs(): ConvertToQICall__Outputs {
    return new ConvertToQICall__Outputs(this);
  }
}

export class ConvertToQICall__Inputs {
  _call: ConvertToQICall;

  constructor(call: ConvertToQICall) {
    this._call = call;
  }

  get path_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amountIn_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConvertToQICall__Outputs {
  _call: ConvertToQICall;

  constructor(call: ConvertToQICall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get relock_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get qi_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ocQi_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get treasury_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get dao_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class MigrateStakingCall extends ethereum.Call {
  get inputs(): MigrateStakingCall__Inputs {
    return new MigrateStakingCall__Inputs(this);
  }

  get outputs(): MigrateStakingCall__Outputs {
    return new MigrateStakingCall__Outputs(this);
  }
}

export class MigrateStakingCall__Inputs {
  _call: MigrateStakingCall;

  constructor(call: MigrateStakingCall) {
    this._call = call;
  }

  get oldPid_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPid_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MigrateStakingCall__Outputs {
  _call: MigrateStakingCall;

  constructor(call: MigrateStakingCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDelegateCall extends ethereum.Call {
  get inputs(): SetDelegateCall__Inputs {
    return new SetDelegateCall__Inputs(this);
  }

  get outputs(): SetDelegateCall__Outputs {
    return new SetDelegateCall__Outputs(this);
  }
}

export class SetDelegateCall__Inputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }

  get delegateContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegate_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDelegateCall__Outputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }
}

export class SetReinvestRateCall extends ethereum.Call {
  get inputs(): SetReinvestRateCall__Inputs {
    return new SetReinvestRateCall__Inputs(this);
  }

  get outputs(): SetReinvestRateCall__Outputs {
    return new SetReinvestRateCall__Outputs(this);
  }
}

export class SetReinvestRateCall__Inputs {
  _call: SetReinvestRateCall;

  constructor(call: SetReinvestRateCall) {
    this._call = call;
  }

  get rate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReinvestRateCall__Outputs {
  _call: SetReinvestRateCall;

  constructor(call: SetReinvestRateCall) {
    this._call = call;
  }
}

export class SetReinvestStrategyCall extends ethereum.Call {
  get inputs(): SetReinvestStrategyCall__Inputs {
    return new SetReinvestStrategyCall__Inputs(this);
  }

  get outputs(): SetReinvestStrategyCall__Outputs {
    return new SetReinvestStrategyCall__Outputs(this);
  }
}

export class SetReinvestStrategyCall__Inputs {
  _call: SetReinvestStrategyCall;

  constructor(call: SetReinvestStrategyCall) {
    this._call = call;
  }

  get reinvestStrategy_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReinvestStrategyCall__Outputs {
  _call: SetReinvestStrategyCall;

  constructor(call: SetReinvestStrategyCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get pid_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class ToggleLockerCall extends ethereum.Call {
  get inputs(): ToggleLockerCall__Inputs {
    return new ToggleLockerCall__Inputs(this);
  }

  get outputs(): ToggleLockerCall__Outputs {
    return new ToggleLockerCall__Outputs(this);
  }
}

export class ToggleLockerCall__Inputs {
  _call: ToggleLockerCall;

  constructor(call: ToggleLockerCall) {
    this._call = call;
  }

  get locker_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ToggleLockerCall__Outputs {
  _call: ToggleLockerCall;

  constructor(call: ToggleLockerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get pid_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
