// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AmountLockClaimSet extends ethereum.Event {
  get params(): AmountLockClaimSet__Params {
    return new AmountLockClaimSet__Params(this);
  }
}

export class AmountLockClaimSet__Params {
  _event: AmountLockClaimSet;

  constructor(event: AmountLockClaimSet) {
    this._event = event;
  }

  get newAmountLockClaim(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isEnabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ContributionUpdated extends ethereum.Event {
  get params(): ContributionUpdated__Params {
    return new ContributionUpdated__Params(this);
  }
}

export class ContributionUpdated__Params {
  _event: ContributionUpdated;

  constructor(event: ContributionUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newContribution(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldContribution(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC11551RequirementListDeleted extends ethereum.Event {
  get params(): ERC11551RequirementListDeleted__Params {
    return new ERC11551RequirementListDeleted__Params(this);
  }
}

export class ERC11551RequirementListDeleted__Params {
  _event: ERC11551RequirementListDeleted;

  constructor(event: ERC11551RequirementListDeleted) {
    this._event = event;
  }

  get contractERC1155(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ERC1155RequirementListSet extends ethereum.Event {
  get params(): ERC1155RequirementListSet__Params {
    return new ERC1155RequirementListSet__Params(this);
  }
}

export class ERC1155RequirementListSet__Params {
  _event: ERC1155RequirementListSet;

  constructor(event: ERC1155RequirementListSet) {
    this._event = event;
  }

  get contractERC1155(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get minAmountId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxAmountId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721RequirementListDeleted extends ethereum.Event {
  get params(): ERC721RequirementListDeleted__Params {
    return new ERC721RequirementListDeleted__Params(this);
  }
}

export class ERC721RequirementListDeleted__Params {
  _event: ERC721RequirementListDeleted;

  constructor(event: ERC721RequirementListDeleted) {
    this._event = event;
  }

  get contractERC721(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ERC721RequirementListSet extends ethereum.Event {
  get params(): ERC721RequirementListSet__Params {
    return new ERC721RequirementListSet__Params(this);
  }
}

export class ERC721RequirementListSet__Params {
  _event: ERC721RequirementListSet;

  constructor(event: ERC721RequirementListSet) {
    this._event = event;
  }

  get contractERC721(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get balanceOf(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get minAmountBalanceOf(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get maxAmountBalanceOf(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minAmountId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get maxAmountId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Exit extends ethereum.Event {
  get params(): Exit__Params {
    return new Exit__Params(this);
  }
}

export class Exit__Params {
  _event: Exit;

  constructor(event: Exit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MaxStakeOverallSet extends ethereum.Event {
  get params(): MaxStakeOverallSet__Params {
    return new MaxStakeOverallSet__Params(this);
  }
}

export class MaxStakeOverallSet__Params {
  _event: MaxStakeOverallSet;

  constructor(event: MaxStakeOverallSet) {
    this._event = event;
  }

  get newMaxStake(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldMaxStake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TimeLockWithdrawSet extends ethereum.Event {
  get params(): TimeLockWithdrawSet__Params {
    return new TimeLockWithdrawSet__Params(this);
  }
}

export class TimeLockWithdrawSet__Params {
  _event: TimeLockWithdrawSet;

  constructor(event: TimeLockWithdrawSet) {
    this._event = event;
  }

  get newTimeWithdraw(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TimelockClaimSet extends ethereum.Event {
  get params(): TimelockClaimSet__Params {
    return new TimelockClaimSet__Params(this);
  }
}

export class TimelockClaimSet__Params {
  _event: TimelockClaimSet;

  constructor(event: TimelockClaimSet) {
    this._event = event;
  }

  get lockPeriodInSecs(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TimelockDepositSet extends ethereum.Event {
  get params(): TimelockDepositSet__Params {
    return new TimelockDepositSet__Params(this);
  }
}

export class TimelockDepositSet__Params {
  _event: TimelockDepositSet;

  constructor(event: TimelockDepositSet) {
    this._event = event;
  }

  get newTimeDeposit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SandboxLandStaking__amountLockClaimResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class SandboxLandStaking__getERC1155RequirementListResultValue0Struct extends ethereum.Tuple {
  get ids(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get minAmountId(): BigInt {
    return this[1].toBigInt();
  }

  get maxAmountId(): BigInt {
    return this[2].toBigInt();
  }

  get index(): BigInt {
    return this[3].toBigInt();
  }
}

export class SandboxLandStaking__getERC721RequirementListResultValue0Struct extends ethereum.Tuple {
  get ids(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get balanceOf(): boolean {
    return this[1].toBoolean();
  }

  get minAmountBalanceOf(): BigInt {
    return this[2].toBigInt();
  }

  get maxAmountBalanceOf(): BigInt {
    return this[3].toBigInt();
  }

  get minAmountId(): BigInt {
    return this[4].toBigInt();
  }

  get maxAmountId(): BigInt {
    return this[5].toBigInt();
  }

  get index(): BigInt {
    return this[6].toBigInt();
  }
}

export class SandboxLandStaking extends ethereum.SmartContract {
  static bind(address: Address): SandboxLandStaking {
    return new SandboxLandStaking("SandboxLandStaking", address);
  }

  amountLockClaim(): SandboxLandStaking__amountLockClaimResult {
    let result = super.call(
      "amountLockClaim",
      "amountLockClaim():(uint256,bool)",
      []
    );

    return new SandboxLandStaking__amountLockClaimResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_amountLockClaim(): ethereum.CallResult<
    SandboxLandStaking__amountLockClaimResult
  > {
    let result = super.tryCall(
      "amountLockClaim",
      "amountLockClaim():(uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SandboxLandStaking__amountLockClaimResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  amountLockLimit(): BigInt {
    let result = super.call(
      "amountLockLimit",
      "amountLockLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_amountLockLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountLockLimit",
      "amountLockLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAndGetERC1155Stake(account: Address): BigInt {
    let result = super.call(
      "checkAndGetERC1155Stake",
      "checkAndGetERC1155Stake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_checkAndGetERC1155Stake(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkAndGetERC1155Stake",
      "checkAndGetERC1155Stake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAndGetERC721Stake(account: Address): BigInt {
    let result = super.call(
      "checkAndGetERC721Stake",
      "checkAndGetERC721Stake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_checkAndGetERC721Stake(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkAndGetERC721Stake",
      "checkAndGetERC721Stake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractsLimit(): BigInt {
    let result = super.call("contractsLimit", "contractsLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_contractsLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractsLimit",
      "contractsLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributionOf(account: Address): BigInt {
    let result = super.call(
      "contributionOf",
      "contributionOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_contributionOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributionOf",
      "contributionOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributionRules(): Address {
    let result = super.call(
      "contributionRules",
      "contributionRules():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_contributionRules(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contributionRules",
      "contributionRules():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  earned(account: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_earned(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC1155BalanceId(reqContract: Address, account: Address): BigInt {
    let result = super.call(
      "getERC1155BalanceId",
      "getERC1155BalanceId(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(reqContract),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getERC1155BalanceId(
    reqContract: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC1155BalanceId",
      "getERC1155BalanceId(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(reqContract),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC1155MaxStake(account: Address): BigInt {
    let result = super.call(
      "getERC1155MaxStake",
      "getERC1155MaxStake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getERC1155MaxStake(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC1155MaxStake",
      "getERC1155MaxStake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC1155RequirementList(
    contractERC1155: Address
  ): SandboxLandStaking__getERC1155RequirementListResultValue0Struct {
    let result = super.call(
      "getERC1155RequirementList",
      "getERC1155RequirementList(address):((uint256[],uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(contractERC1155)]
    );

    return changetype<
      SandboxLandStaking__getERC1155RequirementListResultValue0Struct
    >(result[0].toTuple());
  }

  try_getERC1155RequirementList(
    contractERC1155: Address
  ): ethereum.CallResult<
    SandboxLandStaking__getERC1155RequirementListResultValue0Struct
  > {
    let result = super.tryCall(
      "getERC1155RequirementList",
      "getERC1155RequirementList(address):((uint256[],uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(contractERC1155)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        SandboxLandStaking__getERC1155RequirementListResultValue0Struct
      >(value[0].toTuple())
    );
  }

  getERC721BalanceId(reqContract: Address, account: Address): BigInt {
    let result = super.call(
      "getERC721BalanceId",
      "getERC721BalanceId(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(reqContract),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_getERC721BalanceId(
    reqContract: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC721BalanceId",
      "getERC721BalanceId(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(reqContract),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC721MaxStake(account: Address): BigInt {
    let result = super.call(
      "getERC721MaxStake",
      "getERC721MaxStake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getERC721MaxStake(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC721MaxStake",
      "getERC721MaxStake(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC721RequirementList(
    contractERC721: Address
  ): SandboxLandStaking__getERC721RequirementListResultValue0Struct {
    let result = super.call(
      "getERC721RequirementList",
      "getERC721RequirementList(address):((uint256[],bool,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(contractERC721)]
    );

    return changetype<
      SandboxLandStaking__getERC721RequirementListResultValue0Struct
    >(result[0].toTuple());
  }

  try_getERC721RequirementList(
    contractERC721: Address
  ): ethereum.CallResult<
    SandboxLandStaking__getERC721RequirementListResultValue0Struct
  > {
    let result = super.tryCall(
      "getERC721RequirementList",
      "getERC721RequirementList(address):((uint256[],bool,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(contractERC721)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        SandboxLandStaking__getERC721RequirementListResultValue0Struct
      >(value[0].toTuple())
    );
  }

  getRemainingTimelockClaim(): BigInt {
    let result = super.call(
      "getRemainingTimelockClaim",
      "getRemainingTimelockClaim():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRemainingTimelockClaim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRemainingTimelockClaim",
      "getRemainingTimelockClaim():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRemainingTimelockDeposit(): BigInt {
    let result = super.call(
      "getRemainingTimelockDeposit",
      "getRemainingTimelockDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRemainingTimelockDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRemainingTimelockDeposit",
      "getRemainingTimelockDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRemainingTimelockWithdraw(): BigInt {
    let result = super.call(
      "getRemainingTimelockWithdraw",
      "getRemainingTimelockWithdraw():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRemainingTimelockWithdraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRemainingTimelockWithdraw",
      "getRemainingTimelockWithdraw():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardsAvailable(): BigInt {
    let result = super.call(
      "getRewardsAvailable",
      "getRewardsAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardsAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardsAvailable",
      "getRewardsAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  idsLimit(): BigInt {
    let result = super.call("idsLimit", "idsLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_idsLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("idsLimit", "idsLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isERC1155MemberRequirementList(reqContract: Address): boolean {
    let result = super.call(
      "isERC1155MemberRequirementList",
      "isERC1155MemberRequirementList(address):(bool)",
      [ethereum.Value.fromAddress(reqContract)]
    );

    return result[0].toBoolean();
  }

  try_isERC1155MemberRequirementList(
    reqContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isERC1155MemberRequirementList",
      "isERC1155MemberRequirementList(address):(bool)",
      [ethereum.Value.fromAddress(reqContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isERC721MemberRequirementList(reqContract: Address): boolean {
    let result = super.call(
      "isERC721MemberRequirementList",
      "isERC721MemberRequirementList(address):(bool)",
      [ethereum.Value.fromAddress(reqContract)]
    );

    return result[0].toBoolean();
  }

  try_isERC721MemberRequirementList(
    reqContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isERC721MemberRequirementList",
      "isERC721MemberRequirementList(address):(bool)",
      [ethereum.Value.fromAddress(reqContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockDeposit(): BigInt {
    let result = super.call("lockDeposit", "lockDeposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockDeposit", "lockDeposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockWithdraw(): BigInt {
    let result = super.call("lockWithdraw", "lockWithdraw():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockWithdraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockWithdraw", "lockWithdraw():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxStakeAllowedCalculator(account: Address): BigInt {
    let result = super.call(
      "maxStakeAllowedCalculator",
      "maxStakeAllowedCalculator(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_maxStakeAllowedCalculator(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxStakeAllowedCalculator",
      "maxStakeAllowedCalculator(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxStakeOverall(): BigInt {
    let result = super.call(
      "maxStakeOverall",
      "maxStakeOverall():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxStakeOverall(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxStakeOverall",
      "maxStakeOverall():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardCalculator(): Address {
    let result = super.call(
      "rewardCalculator",
      "rewardCalculator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rewardCalculator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardCalculator",
      "rewardCalculator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPerToken(): BigInt {
    let result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewards(param0: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeToken(): Address {
    let result = super.call("stakeToken", "stakeToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakeToken", "stakeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timeLockClaim(): BigInt {
    let result = super.call("timeLockClaim", "timeLockClaim():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timeLockClaim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeLockClaim",
      "timeLockClaim():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeLockLimit(): BigInt {
    let result = super.call("timeLockLimit", "timeLockLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timeLockLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeLockLimit",
      "timeLockLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalContributions(): BigInt {
    let result = super.call(
      "totalContributions",
      "totalContributions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalContributions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalContributions",
      "totalContributions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(param0: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get stakeToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get trustedForwarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ComputeContributionCall extends ethereum.Call {
  get inputs(): ComputeContributionCall__Inputs {
    return new ComputeContributionCall__Inputs(this);
  }

  get outputs(): ComputeContributionCall__Outputs {
    return new ComputeContributionCall__Outputs(this);
  }
}

export class ComputeContributionCall__Inputs {
  _call: ComputeContributionCall;

  constructor(call: ComputeContributionCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ComputeContributionCall__Outputs {
  _call: ComputeContributionCall;

  constructor(call: ComputeContributionCall) {
    this._call = call;
  }
}

export class ComputeContributionInBatchCall extends ethereum.Call {
  get inputs(): ComputeContributionInBatchCall__Inputs {
    return new ComputeContributionInBatchCall__Inputs(this);
  }

  get outputs(): ComputeContributionInBatchCall__Outputs {
    return new ComputeContributionInBatchCall__Outputs(this);
  }
}

export class ComputeContributionInBatchCall__Inputs {
  _call: ComputeContributionInBatchCall;

  constructor(call: ComputeContributionInBatchCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ComputeContributionInBatchCall__Outputs {
  _call: ComputeContributionInBatchCall;

  constructor(call: ComputeContributionInBatchCall) {
    this._call = call;
  }
}

export class DeleteERC1155RequirementListCall extends ethereum.Call {
  get inputs(): DeleteERC1155RequirementListCall__Inputs {
    return new DeleteERC1155RequirementListCall__Inputs(this);
  }

  get outputs(): DeleteERC1155RequirementListCall__Outputs {
    return new DeleteERC1155RequirementListCall__Outputs(this);
  }
}

export class DeleteERC1155RequirementListCall__Inputs {
  _call: DeleteERC1155RequirementListCall;

  constructor(call: DeleteERC1155RequirementListCall) {
    this._call = call;
  }

  get contractERC1155(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeleteERC1155RequirementListCall__Outputs {
  _call: DeleteERC1155RequirementListCall;

  constructor(call: DeleteERC1155RequirementListCall) {
    this._call = call;
  }
}

export class DeleteERC721RequirementListCall extends ethereum.Call {
  get inputs(): DeleteERC721RequirementListCall__Inputs {
    return new DeleteERC721RequirementListCall__Inputs(this);
  }

  get outputs(): DeleteERC721RequirementListCall__Outputs {
    return new DeleteERC721RequirementListCall__Outputs(this);
  }
}

export class DeleteERC721RequirementListCall__Inputs {
  _call: DeleteERC721RequirementListCall;

  constructor(call: DeleteERC721RequirementListCall) {
    this._call = call;
  }

  get contractERC721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeleteERC721RequirementListCall__Outputs {
  _call: DeleteERC721RequirementListCall;

  constructor(call: DeleteERC721RequirementListCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RecoverFundsCall extends ethereum.Call {
  get inputs(): RecoverFundsCall__Inputs {
    return new RecoverFundsCall__Inputs(this);
  }

  get outputs(): RecoverFundsCall__Outputs {
    return new RecoverFundsCall__Outputs(this);
  }
}

export class RecoverFundsCall__Inputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverFundsCall__Outputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }
}

export class RestartRewardsCall extends ethereum.Call {
  get inputs(): RestartRewardsCall__Inputs {
    return new RestartRewardsCall__Inputs(this);
  }

  get outputs(): RestartRewardsCall__Outputs {
    return new RestartRewardsCall__Outputs(this);
  }
}

export class RestartRewardsCall__Inputs {
  _call: RestartRewardsCall;

  constructor(call: RestartRewardsCall) {
    this._call = call;
  }
}

export class RestartRewardsCall__Outputs {
  _call: RestartRewardsCall;

  constructor(call: RestartRewardsCall) {
    this._call = call;
  }
}

export class SetAmountLockClaimCall extends ethereum.Call {
  get inputs(): SetAmountLockClaimCall__Inputs {
    return new SetAmountLockClaimCall__Inputs(this);
  }

  get outputs(): SetAmountLockClaimCall__Outputs {
    return new SetAmountLockClaimCall__Outputs(this);
  }
}

export class SetAmountLockClaimCall__Inputs {
  _call: SetAmountLockClaimCall;

  constructor(call: SetAmountLockClaimCall) {
    this._call = call;
  }

  get _newAmountLockClaim(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isEnabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAmountLockClaimCall__Outputs {
  _call: SetAmountLockClaimCall;

  constructor(call: SetAmountLockClaimCall) {
    this._call = call;
  }
}

export class SetContributionRulesCall extends ethereum.Call {
  get inputs(): SetContributionRulesCall__Inputs {
    return new SetContributionRulesCall__Inputs(this);
  }

  get outputs(): SetContributionRulesCall__Outputs {
    return new SetContributionRulesCall__Outputs(this);
  }
}

export class SetContributionRulesCall__Inputs {
  _call: SetContributionRulesCall;

  constructor(call: SetContributionRulesCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetContributionRulesCall__Outputs {
  _call: SetContributionRulesCall;

  constructor(call: SetContributionRulesCall) {
    this._call = call;
  }
}

export class SetERC1155RequirementListCall extends ethereum.Call {
  get inputs(): SetERC1155RequirementListCall__Inputs {
    return new SetERC1155RequirementListCall__Inputs(this);
  }

  get outputs(): SetERC1155RequirementListCall__Outputs {
    return new SetERC1155RequirementListCall__Outputs(this);
  }
}

export class SetERC1155RequirementListCall__Inputs {
  _call: SetERC1155RequirementListCall;

  constructor(call: SetERC1155RequirementListCall) {
    this._call = call;
  }

  get contractERC1155(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get minAmountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxAmountId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetERC1155RequirementListCall__Outputs {
  _call: SetERC1155RequirementListCall;

  constructor(call: SetERC1155RequirementListCall) {
    this._call = call;
  }
}

export class SetERC721RequirementListCall extends ethereum.Call {
  get inputs(): SetERC721RequirementListCall__Inputs {
    return new SetERC721RequirementListCall__Inputs(this);
  }

  get outputs(): SetERC721RequirementListCall__Outputs {
    return new SetERC721RequirementListCall__Outputs(this);
  }
}

export class SetERC721RequirementListCall__Inputs {
  _call: SetERC721RequirementListCall;

  constructor(call: SetERC721RequirementListCall) {
    this._call = call;
  }

  get contractERC721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get balanceOf(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get minAmountBalanceOf(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxAmountBalanceOf(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get minAmountId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxAmountId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SetERC721RequirementListCall__Outputs {
  _call: SetERC721RequirementListCall;

  constructor(call: SetERC721RequirementListCall) {
    this._call = call;
  }
}

export class SetMaxStakeOverallCall extends ethereum.Call {
  get inputs(): SetMaxStakeOverallCall__Inputs {
    return new SetMaxStakeOverallCall__Inputs(this);
  }

  get outputs(): SetMaxStakeOverallCall__Outputs {
    return new SetMaxStakeOverallCall__Outputs(this);
  }
}

export class SetMaxStakeOverallCall__Inputs {
  _call: SetMaxStakeOverallCall;

  constructor(call: SetMaxStakeOverallCall) {
    this._call = call;
  }

  get newMaxStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxStakeOverallCall__Outputs {
  _call: SetMaxStakeOverallCall;

  constructor(call: SetMaxStakeOverallCall) {
    this._call = call;
  }
}

export class SetRewardCalculatorCall extends ethereum.Call {
  get inputs(): SetRewardCalculatorCall__Inputs {
    return new SetRewardCalculatorCall__Inputs(this);
  }

  get outputs(): SetRewardCalculatorCall__Outputs {
    return new SetRewardCalculatorCall__Outputs(this);
  }
}

export class SetRewardCalculatorCall__Inputs {
  _call: SetRewardCalculatorCall;

  constructor(call: SetRewardCalculatorCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get restartRewards_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRewardCalculatorCall__Outputs {
  _call: SetRewardCalculatorCall;

  constructor(call: SetRewardCalculatorCall) {
    this._call = call;
  }
}

export class SetRewardTokenCall extends ethereum.Call {
  get inputs(): SetRewardTokenCall__Inputs {
    return new SetRewardTokenCall__Inputs(this);
  }

  get outputs(): SetRewardTokenCall__Outputs {
    return new SetRewardTokenCall__Outputs(this);
  }
}

export class SetRewardTokenCall__Inputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardTokenCall__Outputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }
}

export class SetStakeTokenCall extends ethereum.Call {
  get inputs(): SetStakeTokenCall__Inputs {
    return new SetStakeTokenCall__Inputs(this);
  }

  get outputs(): SetStakeTokenCall__Outputs {
    return new SetStakeTokenCall__Outputs(this);
  }
}

export class SetStakeTokenCall__Inputs {
  _call: SetStakeTokenCall;

  constructor(call: SetStakeTokenCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakeTokenCall__Outputs {
  _call: SetStakeTokenCall;

  constructor(call: SetStakeTokenCall) {
    this._call = call;
  }
}

export class SetTimeLockWithdrawCall extends ethereum.Call {
  get inputs(): SetTimeLockWithdrawCall__Inputs {
    return new SetTimeLockWithdrawCall__Inputs(this);
  }

  get outputs(): SetTimeLockWithdrawCall__Outputs {
    return new SetTimeLockWithdrawCall__Outputs(this);
  }
}

export class SetTimeLockWithdrawCall__Inputs {
  _call: SetTimeLockWithdrawCall;

  constructor(call: SetTimeLockWithdrawCall) {
    this._call = call;
  }

  get _newTimeWithdraw(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimeLockWithdrawCall__Outputs {
  _call: SetTimeLockWithdrawCall;

  constructor(call: SetTimeLockWithdrawCall) {
    this._call = call;
  }
}

export class SetTimelockClaimCall extends ethereum.Call {
  get inputs(): SetTimelockClaimCall__Inputs {
    return new SetTimelockClaimCall__Inputs(this);
  }

  get outputs(): SetTimelockClaimCall__Outputs {
    return new SetTimelockClaimCall__Outputs(this);
  }
}

export class SetTimelockClaimCall__Inputs {
  _call: SetTimelockClaimCall;

  constructor(call: SetTimelockClaimCall) {
    this._call = call;
  }

  get _lockPeriodInSecs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimelockClaimCall__Outputs {
  _call: SetTimelockClaimCall;

  constructor(call: SetTimelockClaimCall) {
    this._call = call;
  }
}

export class SetTimelockDepositCall extends ethereum.Call {
  get inputs(): SetTimelockDepositCall__Inputs {
    return new SetTimelockDepositCall__Inputs(this);
  }

  get outputs(): SetTimelockDepositCall__Outputs {
    return new SetTimelockDepositCall__Outputs(this);
  }
}

export class SetTimelockDepositCall__Inputs {
  _call: SetTimelockDepositCall;

  constructor(call: SetTimelockDepositCall) {
    this._call = call;
  }

  get _newTimeDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimelockDepositCall__Outputs {
  _call: SetTimelockDepositCall;

  constructor(call: SetTimelockDepositCall) {
    this._call = call;
  }
}

export class SetTrustedForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedForwarderCall__Inputs {
    return new SetTrustedForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedForwarderCall__Outputs {
    return new SetTrustedForwarderCall__Outputs(this);
  }
}

export class SetTrustedForwarderCall__Inputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }

  get trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedForwarderCall__Outputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
