// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedRewardToken extends ethereum.Event {
  get params(): AddedRewardToken__Params {
    return new AddedRewardToken__Params(this);
  }
}

export class AddedRewardToken__Params {
  _event: AddedRewardToken;

  constructor(event: AddedRewardToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ContractInitialized extends ethereum.Event {
  get params(): ContractInitialized__Params {
    return new ContractInitialized__Params(this);
  }
}

export class ContractInitialized__Params {
  _event: ContractInitialized;

  constructor(event: ContractInitialized) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get block(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Invest extends ethereum.Event {
  get params(): Invest__Params {
    return new Invest__Params(this);
  }
}

export class Invest__Params {
  _event: Invest;

  constructor(event: Invest) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RemovedRewardToken extends ethereum.Event {
  get params(): RemovedRewardToken__Params {
    return new RemovedRewardToken__Params(this);
  }
}

export class RemovedRewardToken__Params {
  _event: RemovedRewardToken;

  constructor(event: RemovedRewardToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get rewardToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardDenied extends ethereum.Event {
  get params(): RewardDenied__Params {
    return new RewardDenied__Params(this);
  }
}

export class RewardDenied__Params {
  _event: RewardDenied;

  constructor(event: RewardDenied) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardMovedToController extends ethereum.Event {
  get params(): RewardMovedToController__Params {
    return new RewardMovedToController__Params(this);
  }
}

export class RewardMovedToController__Params {
  _event: RewardMovedToController;

  constructor(event: RewardMovedToController) {
    this._event = event;
  }

  get rewardToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardRecirculated extends ethereum.Event {
  get params(): RewardRecirculated__Params {
    return new RewardRecirculated__Params(this);
  }
}

export class RewardRecirculated__Params {
  _event: RewardRecirculated;

  constructor(event: RewardRecirculated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardSentToController extends ethereum.Event {
  get params(): RewardSentToController__Params {
    return new RewardSentToController__Params(this);
  }
}

export class RewardSentToController__Params {
  _event: RewardSentToController;

  constructor(event: RewardSentToController) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StrategyAnnounced extends ethereum.Event {
  get params(): StrategyAnnounced__Params {
    return new StrategyAnnounced__Params(this);
  }
}

export class StrategyAnnounced__Params {
  _event: StrategyAnnounced;

  constructor(event: StrategyAnnounced) {
    this._event = event;
  }

  get newStrategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StrategyChanged extends ethereum.Event {
  get params(): StrategyChanged__Params {
    return new StrategyChanged__Params(this);
  }
}

export class StrategyChanged__Params {
  _event: StrategyChanged;

  constructor(event: StrategyChanged) {
    this._event = event;
  }

  get newStrategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldStrategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedAddressSlot extends ethereum.Event {
  get params(): UpdatedAddressSlot__Params {
    return new UpdatedAddressSlot__Params(this);
  }
}

export class UpdatedAddressSlot__Params {
  _event: UpdatedAddressSlot;

  constructor(event: UpdatedAddressSlot) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldValue(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newValue(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdatedBoolSlot extends ethereum.Event {
  get params(): UpdatedBoolSlot__Params {
    return new UpdatedBoolSlot__Params(this);
  }
}

export class UpdatedBoolSlot__Params {
  _event: UpdatedBoolSlot;

  constructor(event: UpdatedBoolSlot) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldValue(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get newValue(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class UpdatedUint256Slot extends ethereum.Event {
  get params(): UpdatedUint256Slot__Params {
    return new UpdatedUint256Slot__Params(this);
  }
}

export class UpdatedUint256Slot__Params {
  _event: UpdatedUint256Slot;

  constructor(event: UpdatedUint256Slot) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class xTetu extends ethereum.SmartContract {
  static bind(address: Address): xTetu {
    return new xTetu("xTetu", address);
  }

  DEPOSIT_FEE_DENOMINATOR(): BigInt {
    let result = super.call(
      "DEPOSIT_FEE_DENOMINATOR",
      "DEPOSIT_FEE_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEPOSIT_FEE_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEPOSIT_FEE_DENOMINATOR",
      "DEPOSIT_FEE_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOCK_PENALTY_DENOMINATOR(): BigInt {
    let result = super.call(
      "LOCK_PENALTY_DENOMINATOR",
      "LOCK_PENALTY_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LOCK_PENALTY_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LOCK_PENALTY_DENOMINATOR",
      "LOCK_PENALTY_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TO_INVEST_DENOMINATOR(): BigInt {
    let result = super.call(
      "TO_INVEST_DENOMINATOR",
      "TO_INVEST_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TO_INVEST_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TO_INVEST_DENOMINATOR",
      "TO_INVEST_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  active(): boolean {
    let result = super.call("active", "active():(bool)", []);

    return result[0].toBoolean();
  }

  try_active(): ethereum.CallResult<boolean> {
    let result = super.tryCall("active", "active():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alwaysInvest(): boolean {
    let result = super.call("alwaysInvest", "alwaysInvest():(bool)", []);

    return result[0].toBoolean();
  }

  try_alwaysInvest(): ethereum.CallResult<boolean> {
    let result = super.tryCall("alwaysInvest", "alwaysInvest():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableToInvestOut(): BigInt {
    let result = super.call(
      "availableToInvestOut",
      "availableToInvestOut():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableToInvestOut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableToInvestOut",
      "availableToInvestOut():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  created(): BigInt {
    let result = super.call("created", "created():(uint256)", []);

    return result[0].toBigInt();
  }

  try_created(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("created", "created():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createdBlock(): BigInt {
    let result = super.call("createdBlock", "createdBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdBlock", "createdBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositFeeNumerator(): BigInt {
    let result = super.call(
      "depositFeeNumerator",
      "depositFeeNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_depositFeeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositFeeNumerator",
      "depositFeeNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  doHardWorkOnInvest(): boolean {
    let result = super.call(
      "doHardWorkOnInvest",
      "doHardWorkOnInvest():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_doHardWorkOnInvest(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doHardWorkOnInvest",
      "doHardWorkOnInvest():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  duration(): BigInt {
    let result = super.call("duration", "duration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_duration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("duration", "duration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(rt: Address, account: Address): BigInt {
    let result = super.call("earned", "earned(address,address):(uint256)", [
      ethereum.Value.fromAddress(rt),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_earned(rt: Address, account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address,address):(uint256)", [
      ethereum.Value.fromAddress(rt),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedWithBoost(rt: Address, account: Address): BigInt {
    let result = super.call(
      "earnedWithBoost",
      "earnedWithBoost(address,address):(uint256)",
      [ethereum.Value.fromAddress(rt), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_earnedWithBoost(
    rt: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedWithBoost",
      "earnedWithBoost(address,address):(uint256)",
      [ethereum.Value.fromAddress(rt), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPricePerFullShare(): BigInt {
    let result = super.call(
      "getPricePerFullShare",
      "getPricePerFullShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPricePerFullShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPricePerFullShare",
      "getPricePerFullShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardTokenIndex(rt: Address): BigInt {
    let result = super.call(
      "getRewardTokenIndex",
      "getRewardTokenIndex(address):(uint256)",
      [ethereum.Value.fromAddress(rt)]
    );

    return result[0].toBigInt();
  }

  try_getRewardTokenIndex(rt: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardTokenIndex",
      "getRewardTokenIndex(address):(uint256)",
      [ethereum.Value.fromAddress(rt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isController(_value: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isController(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGovernance(_value: Address): boolean {
    let result = super.call("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isGovernance(_value: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGovernance", "isGovernance(address):(bool)", [
      ethereum.Value.fromAddress(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeRewardApplicable(rt: Address): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable(address):(uint256)",
      [ethereum.Value.fromAddress(rt)]
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(rt: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable(address):(uint256)",
      [ethereum.Value.fromAddress(rt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTimeForToken(param0: Address): BigInt {
    let result = super.call(
      "lastUpdateTimeForToken",
      "lastUpdateTimeForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastUpdateTimeForToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTimeForToken",
      "lastUpdateTimeForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockAllowed(): boolean {
    let result = super.call("lockAllowed", "lockAllowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_lockAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("lockAllowed", "lockAllowed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockPenalty(): BigInt {
    let result = super.call("lockPenalty", "lockPenalty():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockPenalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockPenalty", "lockPenalty():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockPeriod(): BigInt {
    let result = super.call("lockPeriod", "lockPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockPeriod", "lockPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  periodFinishForToken(param0: Address): BigInt {
    let result = super.call(
      "periodFinishForToken",
      "periodFinishForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_periodFinishForToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodFinishForToken",
      "periodFinishForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ppfsDecreaseAllowed(): boolean {
    let result = super.call(
      "ppfsDecreaseAllowed",
      "ppfsDecreaseAllowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_ppfsDecreaseAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "ppfsDecreaseAllowed",
      "ppfsDecreaseAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protectionMode(): boolean {
    let result = super.call("protectionMode", "protectionMode():(bool)", []);

    return result[0].toBoolean();
  }

  try_protectionMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall("protectionMode", "protectionMode():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardPerToken(rt: Address): BigInt {
    let result = super.call(
      "rewardPerToken",
      "rewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(rt)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerToken(rt: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(rt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStoredForToken(param0: Address): BigInt {
    let result = super.call(
      "rewardPerTokenStoredForToken",
      "rewardPerTokenStoredForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStoredForToken(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStoredForToken",
      "rewardPerTokenStoredForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRateForToken(param0: Address): BigInt {
    let result = super.call(
      "rewardRateForToken",
      "rewardRateForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardRateForToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardRateForToken",
      "rewardRateForToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(): Array<Address> {
    let result = super.call("rewardTokens", "rewardTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_rewardTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  rewardTokensLength(): BigInt {
    let result = super.call(
      "rewardTokensLength",
      "rewardTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokensLength",
      "rewardTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsForToken(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "rewardsForToken",
      "rewardsForToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_rewardsForToken(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsForToken",
      "rewardsForToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strategy(): Address {
    let result = super.call("strategy", "strategy():(address)", []);

    return result[0].toAddress();
  }

  try_strategy(): ethereum.CallResult<Address> {
    let result = super.tryCall("strategy", "strategy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toInvest(): BigInt {
    let result = super.call("toInvest", "toInvest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_toInvest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("toInvest", "toInvest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingBalanceInVault(): BigInt {
    let result = super.call(
      "underlyingBalanceInVault",
      "underlyingBalanceInVault():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingBalanceInVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingBalanceInVault",
      "underlyingBalanceInVault():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingBalanceWithInvestment(): BigInt {
    let result = super.call(
      "underlyingBalanceWithInvestment",
      "underlyingBalanceWithInvestment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingBalanceWithInvestment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingBalanceWithInvestment",
      "underlyingBalanceWithInvestment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingBalanceWithInvestmentForHolder(holder: Address): BigInt {
    let result = super.call(
      "underlyingBalanceWithInvestmentForHolder",
      "underlyingBalanceWithInvestmentForHolder(address):(uint256)",
      [ethereum.Value.fromAddress(holder)]
    );

    return result[0].toBigInt();
  }

  try_underlyingBalanceWithInvestmentForHolder(
    holder: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingBalanceWithInvestmentForHolder",
      "underlyingBalanceWithInvestmentForHolder(address):(uint256)",
      [ethereum.Value.fromAddress(holder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingUnit(): BigInt {
    let result = super.call("underlyingUnit", "underlyingUnit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_underlyingUnit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingUnit",
      "underlyingUnit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBoostTs(param0: Address): BigInt {
    let result = super.call("userBoostTs", "userBoostTs(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userBoostTs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBoostTs",
      "userBoostTs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userLastDepositTs(param0: Address): BigInt {
    let result = super.call(
      "userLastDepositTs",
      "userLastDepositTs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userLastDepositTs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userLastDepositTs",
      "userLastDepositTs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userLastWithdrawTs(param0: Address): BigInt {
    let result = super.call(
      "userLastWithdrawTs",
      "userLastWithdrawTs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userLastWithdrawTs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userLastWithdrawTs",
      "userLastWithdrawTs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userLockTs(param0: Address): BigInt {
    let result = super.call("userLockTs", "userLockTs(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userLockTs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userLockTs", "userLockTs(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaidForToken(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaidForToken",
      "userRewardPerTokenPaidForToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaidForToken(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaidForToken",
      "userRewardPerTokenPaidForToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddRewardTokenCall extends ethereum.Call {
  get inputs(): AddRewardTokenCall__Inputs {
    return new AddRewardTokenCall__Inputs(this);
  }

  get outputs(): AddRewardTokenCall__Outputs {
    return new AddRewardTokenCall__Outputs(this);
  }
}

export class AddRewardTokenCall__Inputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }

  get rt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRewardTokenCall__Outputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeActivityStatusCall extends ethereum.Call {
  get inputs(): ChangeActivityStatusCall__Inputs {
    return new ChangeActivityStatusCall__Inputs(this);
  }

  get outputs(): ChangeActivityStatusCall__Outputs {
    return new ChangeActivityStatusCall__Outputs(this);
  }
}

export class ChangeActivityStatusCall__Inputs {
  _call: ChangeActivityStatusCall;

  constructor(call: ChangeActivityStatusCall) {
    this._call = call;
  }

  get _active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeActivityStatusCall__Outputs {
  _call: ChangeActivityStatusCall;

  constructor(call: ChangeActivityStatusCall) {
    this._call = call;
  }
}

export class ChangeAlwaysInvestCall extends ethereum.Call {
  get inputs(): ChangeAlwaysInvestCall__Inputs {
    return new ChangeAlwaysInvestCall__Inputs(this);
  }

  get outputs(): ChangeAlwaysInvestCall__Outputs {
    return new ChangeAlwaysInvestCall__Outputs(this);
  }
}

export class ChangeAlwaysInvestCall__Inputs {
  _call: ChangeAlwaysInvestCall;

  constructor(call: ChangeAlwaysInvestCall) {
    this._call = call;
  }

  get _active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeAlwaysInvestCall__Outputs {
  _call: ChangeAlwaysInvestCall;

  constructor(call: ChangeAlwaysInvestCall) {
    this._call = call;
  }
}

export class ChangeDoHardWorkOnInvestCall extends ethereum.Call {
  get inputs(): ChangeDoHardWorkOnInvestCall__Inputs {
    return new ChangeDoHardWorkOnInvestCall__Inputs(this);
  }

  get outputs(): ChangeDoHardWorkOnInvestCall__Outputs {
    return new ChangeDoHardWorkOnInvestCall__Outputs(this);
  }
}

export class ChangeDoHardWorkOnInvestCall__Inputs {
  _call: ChangeDoHardWorkOnInvestCall;

  constructor(call: ChangeDoHardWorkOnInvestCall) {
    this._call = call;
  }

  get _active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeDoHardWorkOnInvestCall__Outputs {
  _call: ChangeDoHardWorkOnInvestCall;

  constructor(call: ChangeDoHardWorkOnInvestCall) {
    this._call = call;
  }
}

export class ChangePpfsDecreaseAllowedCall extends ethereum.Call {
  get inputs(): ChangePpfsDecreaseAllowedCall__Inputs {
    return new ChangePpfsDecreaseAllowedCall__Inputs(this);
  }

  get outputs(): ChangePpfsDecreaseAllowedCall__Outputs {
    return new ChangePpfsDecreaseAllowedCall__Outputs(this);
  }
}

export class ChangePpfsDecreaseAllowedCall__Inputs {
  _call: ChangePpfsDecreaseAllowedCall;

  constructor(call: ChangePpfsDecreaseAllowedCall) {
    this._call = call;
  }

  get _value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangePpfsDecreaseAllowedCall__Outputs {
  _call: ChangePpfsDecreaseAllowedCall;

  constructor(call: ChangePpfsDecreaseAllowedCall) {
    this._call = call;
  }
}

export class ChangeProtectionModeCall extends ethereum.Call {
  get inputs(): ChangeProtectionModeCall__Inputs {
    return new ChangeProtectionModeCall__Inputs(this);
  }

  get outputs(): ChangeProtectionModeCall__Outputs {
    return new ChangeProtectionModeCall__Outputs(this);
  }
}

export class ChangeProtectionModeCall__Inputs {
  _call: ChangeProtectionModeCall;

  constructor(call: ChangeProtectionModeCall) {
    this._call = call;
  }

  get _active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeProtectionModeCall__Outputs {
  _call: ChangeProtectionModeCall;

  constructor(call: ChangeProtectionModeCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositAndInvestCall extends ethereum.Call {
  get inputs(): DepositAndInvestCall__Inputs {
    return new DepositAndInvestCall__Inputs(this);
  }

  get outputs(): DepositAndInvestCall__Outputs {
    return new DepositAndInvestCall__Outputs(this);
  }
}

export class DepositAndInvestCall__Inputs {
  _call: DepositAndInvestCall;

  constructor(call: DepositAndInvestCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositAndInvestCall__Outputs {
  _call: DepositAndInvestCall;

  constructor(call: DepositAndInvestCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get holder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class DisableLockCall extends ethereum.Call {
  get inputs(): DisableLockCall__Inputs {
    return new DisableLockCall__Inputs(this);
  }

  get outputs(): DisableLockCall__Outputs {
    return new DisableLockCall__Outputs(this);
  }
}

export class DisableLockCall__Inputs {
  _call: DisableLockCall;

  constructor(call: DisableLockCall) {
    this._call = call;
  }
}

export class DisableLockCall__Outputs {
  _call: DisableLockCall;

  constructor(call: DisableLockCall) {
    this._call = call;
  }
}

export class DoHardWorkCall extends ethereum.Call {
  get inputs(): DoHardWorkCall__Inputs {
    return new DoHardWorkCall__Inputs(this);
  }

  get outputs(): DoHardWorkCall__Outputs {
    return new DoHardWorkCall__Outputs(this);
  }
}

export class DoHardWorkCall__Inputs {
  _call: DoHardWorkCall;

  constructor(call: DoHardWorkCall) {
    this._call = call;
  }
}

export class DoHardWorkCall__Outputs {
  _call: DoHardWorkCall;

  constructor(call: DoHardWorkCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class GetAllRewardsCall extends ethereum.Call {
  get inputs(): GetAllRewardsCall__Inputs {
    return new GetAllRewardsCall__Inputs(this);
  }

  get outputs(): GetAllRewardsCall__Outputs {
    return new GetAllRewardsCall__Outputs(this);
  }
}

export class GetAllRewardsCall__Inputs {
  _call: GetAllRewardsCall;

  constructor(call: GetAllRewardsCall) {
    this._call = call;
  }
}

export class GetAllRewardsCall__Outputs {
  _call: GetAllRewardsCall;

  constructor(call: GetAllRewardsCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get rt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeControllableCall extends ethereum.Call {
  get inputs(): InitializeControllableCall__Inputs {
    return new InitializeControllableCall__Inputs(this);
  }

  get outputs(): InitializeControllableCall__Outputs {
    return new InitializeControllableCall__Outputs(this);
  }
}

export class InitializeControllableCall__Inputs {
  _call: InitializeControllableCall;

  constructor(call: InitializeControllableCall) {
    this._call = call;
  }

  get __controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeControllableCall__Outputs {
  _call: InitializeControllableCall;

  constructor(call: InitializeControllableCall) {
    this._call = call;
  }
}

export class InitializeSmartVaultCall extends ethereum.Call {
  get inputs(): InitializeSmartVaultCall__Inputs {
    return new InitializeSmartVaultCall__Inputs(this);
  }

  get outputs(): InitializeSmartVaultCall__Outputs {
    return new InitializeSmartVaultCall__Outputs(this);
  }
}

export class InitializeSmartVaultCall__Inputs {
  _call: InitializeSmartVaultCall;

  constructor(call: InitializeSmartVaultCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get __underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _lockAllowed(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _depositFee(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class InitializeSmartVaultCall__Outputs {
  _call: InitializeSmartVaultCall;

  constructor(call: InitializeSmartVaultCall) {
    this._call = call;
  }
}

export class InitializeVaultStorageCall extends ethereum.Call {
  get inputs(): InitializeVaultStorageCall__Inputs {
    return new InitializeVaultStorageCall__Inputs(this);
  }

  get outputs(): InitializeVaultStorageCall__Outputs {
    return new InitializeVaultStorageCall__Outputs(this);
  }
}

export class InitializeVaultStorageCall__Inputs {
  _call: InitializeVaultStorageCall;

  constructor(call: InitializeVaultStorageCall) {
    this._call = call;
  }

  get _underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _durationValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get __lockAllowed(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class InitializeVaultStorageCall__Outputs {
  _call: InitializeVaultStorageCall;

  constructor(call: InitializeVaultStorageCall) {
    this._call = call;
  }
}

export class NotifyRewardWithoutPeriodChangeCall extends ethereum.Call {
  get inputs(): NotifyRewardWithoutPeriodChangeCall__Inputs {
    return new NotifyRewardWithoutPeriodChangeCall__Inputs(this);
  }

  get outputs(): NotifyRewardWithoutPeriodChangeCall__Outputs {
    return new NotifyRewardWithoutPeriodChangeCall__Outputs(this);
  }
}

export class NotifyRewardWithoutPeriodChangeCall__Inputs {
  _call: NotifyRewardWithoutPeriodChangeCall;

  constructor(call: NotifyRewardWithoutPeriodChangeCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyRewardWithoutPeriodChangeCall__Outputs {
  _call: NotifyRewardWithoutPeriodChangeCall;

  constructor(call: NotifyRewardWithoutPeriodChangeCall) {
    this._call = call;
  }
}

export class NotifyTargetRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyTargetRewardAmountCall__Inputs {
    return new NotifyTargetRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyTargetRewardAmountCall__Outputs {
    return new NotifyTargetRewardAmountCall__Outputs(this);
  }
}

export class NotifyTargetRewardAmountCall__Inputs {
  _call: NotifyTargetRewardAmountCall;

  constructor(call: NotifyTargetRewardAmountCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyTargetRewardAmountCall__Outputs {
  _call: NotifyTargetRewardAmountCall;

  constructor(call: NotifyTargetRewardAmountCall) {
    this._call = call;
  }
}

export class OverrideNameCall extends ethereum.Call {
  get inputs(): OverrideNameCall__Inputs {
    return new OverrideNameCall__Inputs(this);
  }

  get outputs(): OverrideNameCall__Outputs {
    return new OverrideNameCall__Outputs(this);
  }
}

export class OverrideNameCall__Inputs {
  _call: OverrideNameCall;

  constructor(call: OverrideNameCall) {
    this._call = call;
  }

  get value(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class OverrideNameCall__Outputs {
  _call: OverrideNameCall;

  constructor(call: OverrideNameCall) {
    this._call = call;
  }
}

export class OverrideSymbolCall extends ethereum.Call {
  get inputs(): OverrideSymbolCall__Inputs {
    return new OverrideSymbolCall__Inputs(this);
  }

  get outputs(): OverrideSymbolCall__Outputs {
    return new OverrideSymbolCall__Outputs(this);
  }
}

export class OverrideSymbolCall__Inputs {
  _call: OverrideSymbolCall;

  constructor(call: OverrideSymbolCall) {
    this._call = call;
  }

  get value(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class OverrideSymbolCall__Outputs {
  _call: OverrideSymbolCall;

  constructor(call: OverrideSymbolCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RemoveRewardTokenCall extends ethereum.Call {
  get inputs(): RemoveRewardTokenCall__Inputs {
    return new RemoveRewardTokenCall__Inputs(this);
  }

  get outputs(): RemoveRewardTokenCall__Outputs {
    return new RemoveRewardTokenCall__Outputs(this);
  }
}

export class RemoveRewardTokenCall__Inputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }

  get rt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRewardTokenCall__Outputs {
  _call: RemoveRewardTokenCall;

  constructor(call: RemoveRewardTokenCall) {
    this._call = call;
  }
}

export class SetLockPenaltyCall extends ethereum.Call {
  get inputs(): SetLockPenaltyCall__Inputs {
    return new SetLockPenaltyCall__Inputs(this);
  }

  get outputs(): SetLockPenaltyCall__Outputs {
    return new SetLockPenaltyCall__Outputs(this);
  }
}

export class SetLockPenaltyCall__Inputs {
  _call: SetLockPenaltyCall;

  constructor(call: SetLockPenaltyCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockPenaltyCall__Outputs {
  _call: SetLockPenaltyCall;

  constructor(call: SetLockPenaltyCall) {
    this._call = call;
  }
}

export class SetLockPeriodCall extends ethereum.Call {
  get inputs(): SetLockPeriodCall__Inputs {
    return new SetLockPeriodCall__Inputs(this);
  }

  get outputs(): SetLockPeriodCall__Outputs {
    return new SetLockPeriodCall__Outputs(this);
  }
}

export class SetLockPeriodCall__Inputs {
  _call: SetLockPeriodCall;

  constructor(call: SetLockPeriodCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockPeriodCall__Outputs {
  _call: SetLockPeriodCall;

  constructor(call: SetLockPeriodCall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get newStrategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class SetToInvestCall extends ethereum.Call {
  get inputs(): SetToInvestCall__Inputs {
    return new SetToInvestCall__Inputs(this);
  }

  get outputs(): SetToInvestCall__Outputs {
    return new SetToInvestCall__Outputs(this);
  }
}

export class SetToInvestCall__Inputs {
  _call: SetToInvestCall;

  constructor(call: SetToInvestCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetToInvestCall__Outputs {
  _call: SetToInvestCall;

  constructor(call: SetToInvestCall) {
    this._call = call;
  }
}

export class StopCall extends ethereum.Call {
  get inputs(): StopCall__Inputs {
    return new StopCall__Inputs(this);
  }

  get outputs(): StopCall__Outputs {
    return new StopCall__Outputs(this);
  }
}

export class StopCall__Inputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class StopCall__Outputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get numberOfShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllToVaultCall extends ethereum.Call {
  get inputs(): WithdrawAllToVaultCall__Inputs {
    return new WithdrawAllToVaultCall__Inputs(this);
  }

  get outputs(): WithdrawAllToVaultCall__Outputs {
    return new WithdrawAllToVaultCall__Outputs(this);
  }
}

export class WithdrawAllToVaultCall__Inputs {
  _call: WithdrawAllToVaultCall;

  constructor(call: WithdrawAllToVaultCall) {
    this._call = call;
  }
}

export class WithdrawAllToVaultCall__Outputs {
  _call: WithdrawAllToVaultCall;

  constructor(call: WithdrawAllToVaultCall) {
    this._call = call;
  }
}
