// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DystRouter__UNSAFE_swapExactTokensForTokensInputRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class DystRouter__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DystRouter__getAmountOutResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class DystRouter__getAmountsOutInputRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class DystRouter__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__quoteAddLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DystRouter__quoteRemoveLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__removeLiquidityMATICResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__removeLiquidityMATICSupportingFeeOnTransferTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__removeLiquidityMATICWithPermitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__removeLiquidityMATICWithPermitSupportingFeeOnTransferTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__removeLiquidityWithPermitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DystRouter__sortTokensResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class DystRouter__swapExactTokensForMATICInputRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class DystRouter__swapExactTokensForTokensInputRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class DystRouter extends ethereum.SmartContract {
  static bind(address: Address): DystRouter {
    return new DystRouter("DystRouter", address);
  }

  UNSAFE_swapExactTokensForTokens(
    amounts: Array<BigInt>,
    routes: Array<DystRouter__UNSAFE_swapExactTokensForTokensInputRoutesStruct>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "UNSAFE_swapExactTokensForTokens",
      "UNSAFE_swapExactTokensForTokens(uint256[],(address,address,bool)[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromTupleArray(routes),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_UNSAFE_swapExactTokensForTokens(
    amounts: Array<BigInt>,
    routes: Array<DystRouter__UNSAFE_swapExactTokensForTokensInputRoutesStruct>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "UNSAFE_swapExactTokensForTokens",
      "UNSAFE_swapExactTokensForTokens(uint256[],(address,address,bool)[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromTupleArray(routes),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  addLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    amountADesired: BigInt,
    amountBDesired: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): DystRouter__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(amountADesired),
        ethereum.Value.fromUnsignedBigInt(amountBDesired),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new DystRouter__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    amountADesired: BigInt,
    amountBDesired: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<DystRouter__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(amountADesired),
        ethereum.Value.fromUnsignedBigInt(amountBDesired),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAmountOut(
    amountIn: BigInt,
    tokenIn: Address,
    tokenOut: Address
  ): DystRouter__getAmountOutResult {
    let result = super.call(
      "getAmountOut",
      "getAmountOut(uint256,address,address):(uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return new DystRouter__getAmountOutResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getAmountOut(
    amountIn: BigInt,
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<DystRouter__getAmountOutResult> {
    let result = super.tryCall(
      "getAmountOut",
      "getAmountOut(uint256,address,address):(uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__getAmountOutResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  getAmountsOut(
    amountIn: BigInt,
    routes: Array<DystRouter__getAmountsOutInputRoutesStruct>
  ): Array<BigInt> {
    let result = super.call(
      "getAmountsOut",
      "getAmountsOut(uint256,(address,address,bool)[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromTupleArray(routes)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsOut(
    amountIn: BigInt,
    routes: Array<DystRouter__getAmountsOutInputRoutesStruct>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsOut",
      "getAmountsOut(uint256,(address,address,bool)[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromTupleArray(routes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getExactAmountOut(
    amountIn: BigInt,
    tokenIn: Address,
    tokenOut: Address,
    stable: boolean
  ): BigInt {
    let result = super.call(
      "getExactAmountOut",
      "getExactAmountOut(uint256,address,address,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromBoolean(stable)
      ]
    );

    return result[0].toBigInt();
  }

  try_getExactAmountOut(
    amountIn: BigInt,
    tokenIn: Address,
    tokenOut: Address,
    stable: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExactAmountOut",
      "getExactAmountOut(uint256,address,address,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromBoolean(stable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserves(
    tokenA: Address,
    tokenB: Address,
    stable: boolean
  ): DystRouter__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves(address,address,bool):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable)
      ]
    );

    return new DystRouter__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReserves(
    tokenA: Address,
    tokenB: Address,
    stable: boolean
  ): ethereum.CallResult<DystRouter__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves(address,address,bool):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  isPair(pair: Address): boolean {
    let result = super.call("isPair", "isPair(address):(bool)", [
      ethereum.Value.fromAddress(pair)
    ]);

    return result[0].toBoolean();
  }

  try_isPair(pair: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPair", "isPair(address):(bool)", [
      ethereum.Value.fromAddress(pair)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pairFor(tokenA: Address, tokenB: Address, stable: boolean): Address {
    let result = super.call(
      "pairFor",
      "pairFor(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable)
      ]
    );

    return result[0].toAddress();
  }

  try_pairFor(
    tokenA: Address,
    tokenB: Address,
    stable: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pairFor",
      "pairFor(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoteAddLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    amountADesired: BigInt,
    amountBDesired: BigInt
  ): DystRouter__quoteAddLiquidityResult {
    let result = super.call(
      "quoteAddLiquidity",
      "quoteAddLiquidity(address,address,bool,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(amountADesired),
        ethereum.Value.fromUnsignedBigInt(amountBDesired)
      ]
    );

    return new DystRouter__quoteAddLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_quoteAddLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    amountADesired: BigInt,
    amountBDesired: BigInt
  ): ethereum.CallResult<DystRouter__quoteAddLiquidityResult> {
    let result = super.tryCall(
      "quoteAddLiquidity",
      "quoteAddLiquidity(address,address,bool,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(amountADesired),
        ethereum.Value.fromUnsignedBigInt(amountBDesired)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__quoteAddLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  quoteLiquidity(amountA: BigInt, reserveA: BigInt, reserveB: BigInt): BigInt {
    let result = super.call(
      "quoteLiquidity",
      "quoteLiquidity(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(reserveA),
        ethereum.Value.fromUnsignedBigInt(reserveB)
      ]
    );

    return result[0].toBigInt();
  }

  try_quoteLiquidity(
    amountA: BigInt,
    reserveA: BigInt,
    reserveB: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quoteLiquidity",
      "quoteLiquidity(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(reserveA),
        ethereum.Value.fromUnsignedBigInt(reserveB)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteRemoveLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    liquidity: BigInt
  ): DystRouter__quoteRemoveLiquidityResult {
    let result = super.call(
      "quoteRemoveLiquidity",
      "quoteRemoveLiquidity(address,address,bool,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );

    return new DystRouter__quoteRemoveLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_quoteRemoveLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    liquidity: BigInt
  ): ethereum.CallResult<DystRouter__quoteRemoveLiquidityResult> {
    let result = super.tryCall(
      "quoteRemoveLiquidity",
      "quoteRemoveLiquidity(address,address,bool,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__quoteRemoveLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): DystRouter__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new DystRouter__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidity(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<DystRouter__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityMATIC(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountMATICMin: BigInt,
    to: Address,
    deadline: BigInt
  ): DystRouter__removeLiquidityMATICResult {
    let result = super.call(
      "removeLiquidityMATIC",
      "removeLiquidityMATIC(address,bool,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountMATICMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new DystRouter__removeLiquidityMATICResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityMATIC(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountMATICMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<DystRouter__removeLiquidityMATICResult> {
    let result = super.tryCall(
      "removeLiquidityMATIC",
      "removeLiquidityMATIC(address,bool,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountMATICMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__removeLiquidityMATICResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityMATICSupportingFeeOnTransferTokens(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountFTMMin: BigInt,
    to: Address,
    deadline: BigInt
  ): DystRouter__removeLiquidityMATICSupportingFeeOnTransferTokensResult {
    let result = super.call(
      "removeLiquidityMATICSupportingFeeOnTransferTokens",
      "removeLiquidityMATICSupportingFeeOnTransferTokens(address,bool,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountFTMMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new DystRouter__removeLiquidityMATICSupportingFeeOnTransferTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityMATICSupportingFeeOnTransferTokens(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountFTMMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<
    DystRouter__removeLiquidityMATICSupportingFeeOnTransferTokensResult
  > {
    let result = super.tryCall(
      "removeLiquidityMATICSupportingFeeOnTransferTokens",
      "removeLiquidityMATICSupportingFeeOnTransferTokens(address,bool,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountFTMMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__removeLiquidityMATICSupportingFeeOnTransferTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityMATICWithPermit(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountMATICMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): DystRouter__removeLiquidityMATICWithPermitResult {
    let result = super.call(
      "removeLiquidityMATICWithPermit",
      "removeLiquidityMATICWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountMATICMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return new DystRouter__removeLiquidityMATICWithPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityMATICWithPermit(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountMATICMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<DystRouter__removeLiquidityMATICWithPermitResult> {
    let result = super.tryCall(
      "removeLiquidityMATICWithPermit",
      "removeLiquidityMATICWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountMATICMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__removeLiquidityMATICWithPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountFTMMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): DystRouter__removeLiquidityMATICWithPermitSupportingFeeOnTransferTokensResult {
    let result = super.call(
      "removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens",
      "removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountFTMMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return new DystRouter__removeLiquidityMATICWithPermitSupportingFeeOnTransferTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(
    token: Address,
    stable: boolean,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountFTMMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<
    DystRouter__removeLiquidityMATICWithPermitSupportingFeeOnTransferTokensResult
  > {
    let result = super.tryCall(
      "removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens",
      "removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountFTMMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__removeLiquidityMATICWithPermitSupportingFeeOnTransferTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityWithPermit(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): DystRouter__removeLiquidityWithPermitResult {
    let result = super.call(
      "removeLiquidityWithPermit",
      "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return new DystRouter__removeLiquidityWithPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityWithPermit(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<DystRouter__removeLiquidityWithPermitResult> {
    let result = super.tryCall(
      "removeLiquidityWithPermit",
      "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__removeLiquidityWithPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  sortTokens(tokenA: Address, tokenB: Address): DystRouter__sortTokensResult {
    let result = super.call(
      "sortTokens",
      "sortTokens(address,address):(address,address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );

    return new DystRouter__sortTokensResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_sortTokens(
    tokenA: Address,
    tokenB: Address
  ): ethereum.CallResult<DystRouter__sortTokensResult> {
    let result = super.tryCall(
      "sortTokens",
      "sortTokens(address,address):(address,address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DystRouter__sortTokensResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  swapExactTokensForMATIC(
    amountIn: BigInt,
    amountOutMin: BigInt,
    routes: Array<DystRouter__swapExactTokensForMATICInputRoutesStruct>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForMATIC",
      "swapExactTokensForMATIC(uint256,uint256,(address,address,bool)[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromTupleArray(routes),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForMATIC(
    amountIn: BigInt,
    amountOutMin: BigInt,
    routes: Array<DystRouter__swapExactTokensForMATICInputRoutesStruct>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForMATIC",
      "swapExactTokensForMATIC(uint256,uint256,(address,address,bool)[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromTupleArray(routes),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    routes: Array<DystRouter__swapExactTokensForTokensInputRoutesStruct>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,(address,address,bool)[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromTupleArray(routes),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    routes: Array<DystRouter__swapExactTokensForTokensInputRoutesStruct>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,(address,address,bool)[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromTupleArray(routes),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapExactTokensForTokensSimple(
    amountIn: BigInt,
    amountOutMin: BigInt,
    tokenFrom: Address,
    tokenTo: Address,
    stable: boolean,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForTokensSimple",
      "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(tokenFrom),
        ethereum.Value.fromAddress(tokenTo),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForTokensSimple(
    amountIn: BigInt,
    amountOutMin: BigInt,
    tokenFrom: Address,
    tokenTo: Address,
    stable: boolean,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForTokensSimple",
      "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(tokenFrom),
        ethereum.Value.fromAddress(tokenTo),
        ethereum.Value.fromBoolean(stable),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  wmatic(): Address {
    let result = super.call("wmatic", "wmatic():(address)", []);

    return result[0].toAddress();
  }

  try_wmatic(): ethereum.CallResult<Address> {
    let result = super.tryCall("wmatic", "wmatic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wmatic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class UNSAFE_swapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): UNSAFE_swapExactTokensForTokensCall__Inputs {
    return new UNSAFE_swapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): UNSAFE_swapExactTokensForTokensCall__Outputs {
    return new UNSAFE_swapExactTokensForTokensCall__Outputs(this);
  }
}

export class UNSAFE_swapExactTokensForTokensCall__Inputs {
  _call: UNSAFE_swapExactTokensForTokensCall;

  constructor(call: UNSAFE_swapExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get routes(): Array<UNSAFE_swapExactTokensForTokensCallRoutesStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      UNSAFE_swapExactTokensForTokensCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UNSAFE_swapExactTokensForTokensCall__Outputs {
  _call: UNSAFE_swapExactTokensForTokensCall;

  constructor(call: UNSAFE_swapExactTokensForTokensCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class UNSAFE_swapExactTokensForTokensCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get amountADesired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountBDesired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityMATICCall extends ethereum.Call {
  get inputs(): AddLiquidityMATICCall__Inputs {
    return new AddLiquidityMATICCall__Inputs(this);
  }

  get outputs(): AddLiquidityMATICCall__Outputs {
    return new AddLiquidityMATICCall__Outputs(this);
  }
}

export class AddLiquidityMATICCall__Inputs {
  _call: AddLiquidityMATICCall;

  constructor(call: AddLiquidityMATICCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get amountTokenDesired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountMATICMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AddLiquidityMATICCall__Outputs {
  _call: AddLiquidityMATICCall;

  constructor(call: AddLiquidityMATICCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountMATIC(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityMATICCall extends ethereum.Call {
  get inputs(): RemoveLiquidityMATICCall__Inputs {
    return new RemoveLiquidityMATICCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityMATICCall__Outputs {
    return new RemoveLiquidityMATICCall__Outputs(this);
  }
}

export class RemoveLiquidityMATICCall__Inputs {
  _call: RemoveLiquidityMATICCall;

  constructor(call: RemoveLiquidityMATICCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountMATICMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RemoveLiquidityMATICCall__Outputs {
  _call: RemoveLiquidityMATICCall;

  constructor(call: RemoveLiquidityMATICCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountMATIC(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityMATICSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): RemoveLiquidityMATICSupportingFeeOnTransferTokensCall__Inputs {
    return new RemoveLiquidityMATICSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): RemoveLiquidityMATICSupportingFeeOnTransferTokensCall__Outputs {
    return new RemoveLiquidityMATICSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class RemoveLiquidityMATICSupportingFeeOnTransferTokensCall__Inputs {
  _call: RemoveLiquidityMATICSupportingFeeOnTransferTokensCall;

  constructor(call: RemoveLiquidityMATICSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountFTMMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RemoveLiquidityMATICSupportingFeeOnTransferTokensCall__Outputs {
  _call: RemoveLiquidityMATICSupportingFeeOnTransferTokensCall;

  constructor(call: RemoveLiquidityMATICSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountFTM(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityMATICWithPermitCall extends ethereum.Call {
  get inputs(): RemoveLiquidityMATICWithPermitCall__Inputs {
    return new RemoveLiquidityMATICWithPermitCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityMATICWithPermitCall__Outputs {
    return new RemoveLiquidityMATICWithPermitCall__Outputs(this);
  }
}

export class RemoveLiquidityMATICWithPermitCall__Inputs {
  _call: RemoveLiquidityMATICWithPermitCall;

  constructor(call: RemoveLiquidityMATICWithPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountMATICMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get approveMax(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }
}

export class RemoveLiquidityMATICWithPermitCall__Outputs {
  _call: RemoveLiquidityMATICWithPermitCall;

  constructor(call: RemoveLiquidityMATICWithPermitCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountMATIC(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall__Inputs {
    return new RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall__Outputs {
    return new RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall__Inputs {
  _call: RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall;

  constructor(
    call: RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall
  ) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountFTMMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get approveMax(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }
}

export class RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall__Outputs {
  _call: RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall;

  constructor(
    call: RemoveLiquidityMATICWithPermitSupportingFeeOnTransferTokensCall
  ) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountFTM(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityWithPermitCall extends ethereum.Call {
  get inputs(): RemoveLiquidityWithPermitCall__Inputs {
    return new RemoveLiquidityWithPermitCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityWithPermitCall__Outputs {
    return new RemoveLiquidityWithPermitCall__Outputs(this);
  }
}

export class RemoveLiquidityWithPermitCall__Inputs {
  _call: RemoveLiquidityWithPermitCall;

  constructor(call: RemoveLiquidityWithPermitCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get approveMax(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[9].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[11].value.toBytes();
  }
}

export class RemoveLiquidityWithPermitCall__Outputs {
  _call: RemoveLiquidityWithPermitCall;

  constructor(call: RemoveLiquidityWithPermitCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapExactMATICForTokensCall extends ethereum.Call {
  get inputs(): SwapExactMATICForTokensCall__Inputs {
    return new SwapExactMATICForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactMATICForTokensCall__Outputs {
    return new SwapExactMATICForTokensCall__Outputs(this);
  }
}

export class SwapExactMATICForTokensCall__Inputs {
  _call: SwapExactMATICForTokensCall;

  constructor(call: SwapExactMATICForTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get routes(): Array<SwapExactMATICForTokensCallRoutesStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SwapExactMATICForTokensCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactMATICForTokensCall__Outputs {
  _call: SwapExactMATICForTokensCall;

  constructor(call: SwapExactMATICForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactMATICForTokensCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class SwapExactMATICForTokensSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): SwapExactMATICForTokensSupportingFeeOnTransferTokensCall__Inputs {
    return new SwapExactMATICForTokensSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): SwapExactMATICForTokensSupportingFeeOnTransferTokensCall__Outputs {
    return new SwapExactMATICForTokensSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class SwapExactMATICForTokensSupportingFeeOnTransferTokensCall__Inputs {
  _call: SwapExactMATICForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactMATICForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get routes(): Array<
    SwapExactMATICForTokensSupportingFeeOnTransferTokensCallRoutesStruct
  > {
    return this._call.inputValues[1].value.toTupleArray<
      SwapExactMATICForTokensSupportingFeeOnTransferTokensCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactMATICForTokensSupportingFeeOnTransferTokensCall__Outputs {
  _call: SwapExactMATICForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactMATICForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }
}

export class SwapExactMATICForTokensSupportingFeeOnTransferTokensCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class SwapExactTokensForMATICCall extends ethereum.Call {
  get inputs(): SwapExactTokensForMATICCall__Inputs {
    return new SwapExactTokensForMATICCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForMATICCall__Outputs {
    return new SwapExactTokensForMATICCall__Outputs(this);
  }
}

export class SwapExactTokensForMATICCall__Inputs {
  _call: SwapExactTokensForMATICCall;

  constructor(call: SwapExactTokensForMATICCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get routes(): Array<SwapExactTokensForMATICCallRoutesStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SwapExactTokensForMATICCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForMATICCall__Outputs {
  _call: SwapExactTokensForMATICCall;

  constructor(call: SwapExactTokensForMATICCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForMATICCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class SwapExactTokensForMATICSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForMATICSupportingFeeOnTransferTokensCall__Inputs {
    return new SwapExactTokensForMATICSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): SwapExactTokensForMATICSupportingFeeOnTransferTokensCall__Outputs {
    return new SwapExactTokensForMATICSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class SwapExactTokensForMATICSupportingFeeOnTransferTokensCall__Inputs {
  _call: SwapExactTokensForMATICSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForMATICSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get routes(): Array<
    SwapExactTokensForMATICSupportingFeeOnTransferTokensCallRoutesStruct
  > {
    return this._call.inputValues[2].value.toTupleArray<
      SwapExactTokensForMATICSupportingFeeOnTransferTokensCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForMATICSupportingFeeOnTransferTokensCall__Outputs {
  _call: SwapExactTokensForMATICSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForMATICSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }
}

export class SwapExactTokensForMATICSupportingFeeOnTransferTokensCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get routes(): Array<SwapExactTokensForTokensCallRoutesStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SwapExactTokensForTokensCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForTokensCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}

export class SwapExactTokensForTokensSimpleCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensSimpleCall__Inputs {
    return new SwapExactTokensForTokensSimpleCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensSimpleCall__Outputs {
    return new SwapExactTokensForTokensSimpleCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensSimpleCall__Inputs {
  _call: SwapExactTokensForTokensSimpleCall;

  constructor(call: SwapExactTokensForTokensSimpleCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenFrom(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenTo(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SwapExactTokensForTokensSimpleCall__Outputs {
  _call: SwapExactTokensForTokensSimpleCall;

  constructor(call: SwapExactTokensForTokensSimpleCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Inputs {
    return new SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Outputs {
    return new SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Inputs {
  _call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get routes(): Array<
    SwapExactTokensForTokensSupportingFeeOnTransferTokensCallRoutesStruct
  > {
    return this._call.inputValues[2].value.toTupleArray<
      SwapExactTokensForTokensSupportingFeeOnTransferTokensCallRoutesStruct
    >();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Outputs {
  _call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCallRoutesStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get stable(): boolean {
    return this[2].toBoolean();
  }
}
