// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get note(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipPulled extends ethereum.Event {
  get params(): OwnershipPulled__Params {
    return new OwnershipPulled__Params(this);
  }
}

export class OwnershipPulled__Params {
  _event: OwnershipPulled;

  constructor(event: OwnershipPulled) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipPushed extends ethereum.Event {
  get params(): OwnershipPushed__Params {
    return new OwnershipPushed__Params(this);
  }
}

export class OwnershipPushed__Params {
  _event: OwnershipPushed;

  constructor(event: OwnershipPushed) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauseChanged extends ethereum.Event {
  get params(): PauseChanged__Params {
    return new PauseChanged__Params(this);
  }
}

export class PauseChanged__Params {
  _event: PauseChanged;

  constructor(event: PauseChanged) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Recovered extends ethereum.Event {
  get params(): Recovered__Params {
    return new Recovered__Params(this);
  }
}

export class Recovered__Params {
  _event: Recovered;

  constructor(event: Recovered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get note(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get note(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardsDurationUpdated extends ethereum.Event {
  get params(): RewardsDurationUpdated__Params {
    return new RewardsDurationUpdated__Params(this);
  }
}

export class RewardsDurationUpdated__Params {
  _event: RewardsDurationUpdated;

  constructor(event: RewardsDurationUpdated) {
    this._event = event;
  }

  get newDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TermAdded extends ethereum.Event {
  get params(): TermAdded__Params {
    return new TermAdded__Params(this);
  }
}

export class TermAdded__Params {
  _event: TermAdded;

  constructor(event: TermAdded) {
    this._event = event;
  }

  get note(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minLockAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockPeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get multiplier(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TermDisabled extends ethereum.Event {
  get params(): TermDisabled__Params {
    return new TermDisabled__Params(this);
  }
}

export class TermDisabled__Params {
  _event: TermDisabled;

  constructor(event: TermDisabled) {
    this._event = event;
  }

  get note(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TermRemoved extends ethereum.Event {
  get params(): TermRemoved__Params {
    return new TermRemoved__Params(this);
  }
}

export class TermRemoved__Params {
  _event: TermRemoved;

  constructor(event: TermRemoved) {
    this._event = event;
  }

  get note(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OtterLake__epochsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class OtterLake__termsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class OtterLake extends ethereum.SmartContract {
  static bind(address: Address): OtterLake {
    return new OtterLake("OtterLake", address);
  }

  balanceOf(noteAddr: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(
    noteAddr: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  boostPointOf(noteAddr: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "boostPointOf",
      "boostPointOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_boostPointOf(
    noteAddr: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "boostPointOf",
      "boostPointOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimReward(noteAddr: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "claimReward",
      "claimReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimReward(
    noteAddr: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimReward",
      "claimReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributor(): Address {
    let result = super.call("distributor", "distributor():(address)", []);

    return result[0].toAddress();
  }

  try_distributor(): ethereum.CallResult<Address> {
    let result = super.tryCall("distributor", "distributor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochs(param0: BigInt): OtterLake__epochsResult {
    let result = super.call(
      "epochs",
      "epochs(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OtterLake__epochsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_epochs(param0: BigInt): ethereum.CallResult<OtterLake__epochsResult> {
    let result = super.tryCall(
      "epochs",
      "epochs(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OtterLake__epochsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  finalized(): boolean {
    let result = super.call("finalized", "finalized():(bool)", []);

    return result[0].toBoolean();
  }

  try_finalized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("finalized", "finalized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastPauseTime(): BigInt {
    let result = super.call("lastPauseTime", "lastPauseTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastPauseTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastPauseTime",
      "lastPauseTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pearl(): Address {
    let result = super.call("pearl", "pearl():(address)", []);

    return result[0].toAddress();
  }

  try_pearl(): ethereum.CallResult<Address> {
    let result = super.tryCall("pearl", "pearl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reward(noteAddr: Address, tokenId: BigInt): BigInt {
    let result = super.call("reward", "reward(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(noteAddr),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_reward(noteAddr: Address, tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reward", "reward(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(noteAddr),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerBoostPoint(noteAddr: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "rewardPerBoostPoint",
      "rewardPerBoostPoint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_rewardPerBoostPoint(
    noteAddr: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerBoostPoint",
      "rewardPerBoostPoint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerBoostPointPaid(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "rewardPerBoostPointPaid",
      "rewardPerBoostPointPaid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_rewardPerBoostPointPaid(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerBoostPointPaid",
      "rewardPerBoostPointPaid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address, param1: BigInt): BigInt {
    let result = super.call("rewards", "rewards(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewards",
      "rewards(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termAddresses(param0: BigInt): Address {
    let result = super.call(
      "termAddresses",
      "termAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_termAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "termAddresses",
      "termAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  terms(param0: Address): OtterLake__termsResult {
    let result = super.call(
      "terms",
      "terms(address):(address,uint256,uint256,uint16,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OtterLake__termsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBoolean()
    );
  }

  try_terms(param0: Address): ethereum.CallResult<OtterLake__termsResult> {
    let result = super.tryCall(
      "terms",
      "terms(address):(address,uint256,uint256,uint16,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OtterLake__termsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBoolean()
      )
    );
  }

  termsCount(): BigInt {
    let result = super.call("termsCount", "termsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("termsCount", "termsCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBoostPoint(owner: Address): BigInt {
    let result = super.call(
      "totalBoostPoint",
      "totalBoostPoint(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_totalBoostPoint(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBoostPoint",
      "totalBoostPoint(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLocked(): BigInt {
    let result = super.call("totalLocked", "totalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLocked", "totalLocked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlockedBoostPoints(param0: BigInt): BigInt {
    let result = super.call(
      "unlockedBoostPoints",
      "unlockedBoostPoints(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_unlockedBoostPoints(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockedBoostPoints",
      "unlockedBoostPoints(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validEpoch(noteAddr: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "validEpoch",
      "validEpoch(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_validEpoch(
    noteAddr: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validEpoch",
      "validEpoch(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(noteAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get pearl_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get epochLength_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get firstEpochNumber_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get firstEpochEndTime_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTermCall extends ethereum.Call {
  get inputs(): AddTermCall__Inputs {
    return new AddTermCall__Inputs(this);
  }

  get outputs(): AddTermCall__Outputs {
    return new AddTermCall__Outputs(this);
  }
}

export class AddTermCall__Inputs {
  _call: AddTermCall;

  constructor(call: AddTermCall) {
    this._call = call;
  }

  get note_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minLockAmount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lockPeriod_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get multiplier_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AddTermCall__Outputs {
  _call: AddTermCall;

  constructor(call: AddTermCall) {
    this._call = call;
  }
}

export class ClaimAndLockCall extends ethereum.Call {
  get inputs(): ClaimAndLockCall__Inputs {
    return new ClaimAndLockCall__Inputs(this);
  }

  get outputs(): ClaimAndLockCall__Outputs {
    return new ClaimAndLockCall__Outputs(this);
  }
}

export class ClaimAndLockCall__Inputs {
  _call: ClaimAndLockCall;

  constructor(call: ClaimAndLockCall) {
    this._call = call;
  }

  get noteAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimAndLockCall__Outputs {
  _call: ClaimAndLockCall;

  constructor(call: ClaimAndLockCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get noteAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisableTermCall extends ethereum.Call {
  get inputs(): DisableTermCall__Inputs {
    return new DisableTermCall__Inputs(this);
  }

  get outputs(): DisableTermCall__Outputs {
    return new DisableTermCall__Outputs(this);
  }
}

export class DisableTermCall__Inputs {
  _call: DisableTermCall;

  constructor(call: DisableTermCall) {
    this._call = call;
  }

  get note_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableTermCall__Outputs {
  _call: DisableTermCall;

  constructor(call: DisableTermCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get note(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExtendLockCall extends ethereum.Call {
  get inputs(): ExtendLockCall__Inputs {
    return new ExtendLockCall__Inputs(this);
  }

  get outputs(): ExtendLockCall__Outputs {
    return new ExtendLockCall__Outputs(this);
  }
}

export class ExtendLockCall__Inputs {
  _call: ExtendLockCall;

  constructor(call: ExtendLockCall) {
    this._call = call;
  }

  get noteAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExtendLockCall__Outputs {
  _call: ExtendLockCall;

  constructor(call: ExtendLockCall) {
    this._call = call;
  }
}

export class FinalizeCall extends ethereum.Call {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get noteAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class PullManagementCall extends ethereum.Call {
  get inputs(): PullManagementCall__Inputs {
    return new PullManagementCall__Inputs(this);
  }

  get outputs(): PullManagementCall__Outputs {
    return new PullManagementCall__Outputs(this);
  }
}

export class PullManagementCall__Inputs {
  _call: PullManagementCall;

  constructor(call: PullManagementCall) {
    this._call = call;
  }
}

export class PullManagementCall__Outputs {
  _call: PullManagementCall;

  constructor(call: PullManagementCall) {
    this._call = call;
  }
}

export class PushManagementCall extends ethereum.Call {
  get inputs(): PushManagementCall__Inputs {
    return new PushManagementCall__Inputs(this);
  }

  get outputs(): PushManagementCall__Outputs {
    return new PushManagementCall__Outputs(this);
  }
}

export class PushManagementCall__Inputs {
  _call: PushManagementCall;

  constructor(call: PushManagementCall) {
    this._call = call;
  }

  get newOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PushManagementCall__Outputs {
  _call: PushManagementCall;

  constructor(call: PushManagementCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get noteAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RemoveTermAtCall extends ethereum.Call {
  get inputs(): RemoveTermAtCall__Inputs {
    return new RemoveTermAtCall__Inputs(this);
  }

  get outputs(): RemoveTermAtCall__Outputs {
    return new RemoveTermAtCall__Outputs(this);
  }
}

export class RemoveTermAtCall__Inputs {
  _call: RemoveTermAtCall;

  constructor(call: RemoveTermAtCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveTermAtCall__Outputs {
  _call: RemoveTermAtCall;

  constructor(call: RemoveTermAtCall) {
    this._call = call;
  }
}

export class RenounceManagementCall extends ethereum.Call {
  get inputs(): RenounceManagementCall__Inputs {
    return new RenounceManagementCall__Inputs(this);
  }

  get outputs(): RenounceManagementCall__Outputs {
    return new RenounceManagementCall__Outputs(this);
  }
}

export class RenounceManagementCall__Inputs {
  _call: RenounceManagementCall;

  constructor(call: RenounceManagementCall) {
    this._call = call;
  }
}

export class RenounceManagementCall__Outputs {
  _call: RenounceManagementCall;

  constructor(call: RenounceManagementCall) {
    this._call = call;
  }
}

export class SetDistributorCall extends ethereum.Call {
  get inputs(): SetDistributorCall__Inputs {
    return new SetDistributorCall__Inputs(this);
  }

  get outputs(): SetDistributorCall__Outputs {
    return new SetDistributorCall__Outputs(this);
  }
}

export class SetDistributorCall__Inputs {
  _call: SetDistributorCall;

  constructor(call: SetDistributorCall) {
    this._call = call;
  }

  get distributor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDistributorCall__Outputs {
  _call: SetDistributorCall;

  constructor(call: SetDistributorCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}
