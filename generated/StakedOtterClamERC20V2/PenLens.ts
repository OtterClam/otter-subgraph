// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PenLens__votePositionsOfResultValue0Struct extends ethereum.Tuple {
  get delegateAddress(): Address {
    return this[0].toAddress();
  }

  get weightTotal(): BigInt {
    return this[1].toBigInt();
  }

  get weightUsed(): BigInt {
    return this[2].toBigInt();
  }

  get weightAvailable(): BigInt {
    return this[3].toBigInt();
  }

  get votes(): Array<PenLens__votePositionsOfResultValue0VotesStruct> {
    return this[4].toTupleArray<
      PenLens__votePositionsOfResultValue0VotesStruct
    >();
  }
}

export class PenLens__votePositionsOfResultValue0VotesStruct extends ethereum.Tuple {
  get poolAddress(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class PenLens extends ethereum.SmartContract {
  static bind(address: Address): PenLens {
    return new PenLens("PenLens", address);
  }

  votePositionsOf(
    accountAddress: Address
  ): PenLens__votePositionsOfResultValue0Struct {
    let result = super.call(
      "votePositionsOf",
      "votePositionsOf(address):((address,uint256,uint256,uint256,(address,int256)[]))",
      [ethereum.Value.fromAddress(accountAddress)]
    );

    return changetype<PenLens__votePositionsOfResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_votePositionsOf(
    accountAddress: Address
  ): ethereum.CallResult<PenLens__votePositionsOfResultValue0Struct> {
    let result = super.tryCall(
      "votePositionsOf",
      "votePositionsOf(address):((address,uint256,uint256,uint256,(address,int256)[]))",
      [ethereum.Value.fromAddress(accountAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PenLens__votePositionsOfResultValue0Struct>(value[0].toTuple())
    );
  }
}
