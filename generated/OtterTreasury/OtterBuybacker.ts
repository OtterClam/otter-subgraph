// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, JSONValue, TypedMap, Entity, Bytes, Address, BigInt } from '@graphprotocol/graph-ts'

export class Buyback extends ethereum.Event {
  get params(): Buyback__Params {
    return new Buyback__Params(this)
  }
}

export class Buyback__Params {
  _event: Buyback

  constructor(event: Buyback) {
    this._event = event
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get clamAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class OwnershipPulled extends ethereum.Event {
  get params(): OwnershipPulled__Params {
    return new OwnershipPulled__Params(this)
  }
}

export class OwnershipPulled__Params {
  _event: OwnershipPulled

  constructor(event: OwnershipPulled) {
    this._event = event
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class OwnershipPushed extends ethereum.Event {
  get params(): OwnershipPushed__Params {
    return new OwnershipPushed__Params(this)
  }
}

export class OwnershipPushed__Params {
  _event: OwnershipPushed

  constructor(event: OwnershipPushed) {
    this._event = event
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this)
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity

  constructor(event: RemoveLiquidity) {
    this._event = event
  }

  get lp(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get liquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get token0Amount(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get token1Amount(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class OtterBuybacker extends ethereum.SmartContract {
  static bind(address: Address): OtterBuybacker {
    return new OtterBuybacker('OtterBuybacker', address)
  }

  clam(): Address {
    let result = super.call('clam', 'clam():(address)', [])

    return result[0].toAddress()
  }

  try_clam(): ethereum.CallResult<Address> {
    let result = super.tryCall('clam', 'clam():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  dao(): Address {
    let result = super.call('dao', 'dao():(address)', [])

    return result[0].toAddress()
  }

  try_dao(): ethereum.CallResult<Address> {
    let result = super.tryCall('dao', 'dao():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  lpAddress(source_: Address, target_: Address): Address {
    let result = super.call('lpAddress', 'lpAddress(address,address):(address)', [
      ethereum.Value.fromAddress(source_),
      ethereum.Value.fromAddress(target_),
    ])

    return result[0].toAddress()
  }

  try_lpAddress(source_: Address, target_: Address): ethereum.CallResult<Address> {
    let result = super.tryCall('lpAddress', 'lpAddress(address,address):(address)', [
      ethereum.Value.fromAddress(source_),
      ethereum.Value.fromAddress(target_),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', [])

    return result[0].toAddress()
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  router(): Address {
    let result = super.call('router', 'router():(address)', [])

    return result[0].toAddress()
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall('router', 'router():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  treasury(): Address {
    let result = super.call('treasury', 'treasury():(address)', [])

    return result[0].toAddress()
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall('treasury', 'treasury():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }

  get swapRouter_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get treasury_(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get clam_(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get dao_(): Address {
    return this._call.inputValues[3].value.toAddress()
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class BuybackCall extends ethereum.Call {
  get inputs(): BuybackCall__Inputs {
    return new BuybackCall__Inputs(this)
  }

  get outputs(): BuybackCall__Outputs {
    return new BuybackCall__Outputs(this)
  }
}

export class BuybackCall__Inputs {
  _call: BuybackCall

  constructor(call: BuybackCall) {
    this._call = call
  }

  get path_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray()
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }

  get amountOutMin_(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class BuybackCall__Outputs {
  _call: BuybackCall

  constructor(call: BuybackCall) {
    this._call = call
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this)
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this)
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall

  constructor(call: EmergencyWithdrawCall) {
    this._call = call
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall

  constructor(call: EmergencyWithdrawCall) {
    this._call = call
  }
}

export class PullManagementCall extends ethereum.Call {
  get inputs(): PullManagementCall__Inputs {
    return new PullManagementCall__Inputs(this)
  }

  get outputs(): PullManagementCall__Outputs {
    return new PullManagementCall__Outputs(this)
  }
}

export class PullManagementCall__Inputs {
  _call: PullManagementCall

  constructor(call: PullManagementCall) {
    this._call = call
  }
}

export class PullManagementCall__Outputs {
  _call: PullManagementCall

  constructor(call: PullManagementCall) {
    this._call = call
  }
}

export class PushManagementCall extends ethereum.Call {
  get inputs(): PushManagementCall__Inputs {
    return new PushManagementCall__Inputs(this)
  }

  get outputs(): PushManagementCall__Outputs {
    return new PushManagementCall__Outputs(this)
  }
}

export class PushManagementCall__Inputs {
  _call: PushManagementCall

  constructor(call: PushManagementCall) {
    this._call = call
  }

  get newOwner_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class PushManagementCall__Outputs {
  _call: PushManagementCall

  constructor(call: PushManagementCall) {
    this._call = call
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this)
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this)
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall

  constructor(call: RemoveLiquidityCall) {
    this._call = call
  }

  get router_(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get lp_(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get liquidity_(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }

  get amountAMin_(): BigInt {
    return this._call.inputValues[3].value.toBigInt()
  }

  get amountBMin_(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall

  constructor(call: RemoveLiquidityCall) {
    this._call = call
  }
}

export class RenounceManagementCall extends ethereum.Call {
  get inputs(): RenounceManagementCall__Inputs {
    return new RenounceManagementCall__Inputs(this)
  }

  get outputs(): RenounceManagementCall__Outputs {
    return new RenounceManagementCall__Outputs(this)
  }
}

export class RenounceManagementCall__Inputs {
  _call: RenounceManagementCall

  constructor(call: RenounceManagementCall) {
    this._call = call
  }
}

export class RenounceManagementCall__Outputs {
  _call: RenounceManagementCall

  constructor(call: RenounceManagementCall) {
    this._call = call
  }
}
